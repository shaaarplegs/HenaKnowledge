{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar UNDEF,\n    isWithinCircle = function isWithinCircle(x, y, cx, cy, r) {\n  return Math.pow(cx - x, 2) + Math.pow(cy - y, 2) <= Math.pow(r, 2);\n},\n    mathPI = Math.PI,\n    mathCos = Math.cos,\n    mathSin = Math.sin,\n    mathMax = Math.max,\n    mathMin = Math.min,\n    deg2rad = mathPI / 180,\n    rad = function rad(deg) {\n  return deg % 360 * deg2rad;\n},\n    orientation = function orientation(p1x, p1y, q1x, q1y, p2x, p2y) {\n  var A = q1y - p1y,\n      B = p2x - q1x,\n      C = q1x - p1x,\n      D = p2y - q1y,\n      val1,\n      val2,\n      val;\n  val1 = A * B;\n  val2 = C * D;\n\n  if (isNaN(val1)) {\n    val1 = 0;\n  }\n\n  if (isNaN(val2)) {\n    val2 = 0;\n  }\n\n  val = val1 - val2;\n\n  if (val === 0) {\n    return 0;\n  }\n\n  return val > 0 ? 1 : 2;\n},\n    onSegment = function onSegment(p1x, p1y, q1x, q1y, p2x, p2y) {\n  if (q1x <= mathMax(p1x, p2x) && q1x >= mathMin(p1x, p2x) && q1y <= mathMax(p1y, p2y) && q1y >= mathMin(p1y, p2y)) {\n    return true;\n  }\n\n  return false;\n},\n    doIntersect = function doIntersect(p1x, p1y, q1x, q1y, p2x, p2y, q2x, q2y) {\n  var o1 = orientation(p1x, p1y, q1x, q1y, p2x, p2y),\n      o2 = orientation(p1x, p1y, q1x, q1y, q2x, q2y),\n      o3 = orientation(p2x, p2y, q2x, q2y, p1x, p1y),\n      o4 = orientation(p2x, p2y, q2x, q2y, q1x, q1y);\n\n  if (o1 !== o2 && o3 !== o4) {\n    return true;\n  }\n\n  if (o1 === 0 && onSegment(p1x, p1y, p2x, p2y, q1x, q1y)) {\n    return true;\n  }\n\n  if (o2 === 0 && onSegment(p1x, p1y, q2x, q2y, q1x, q1y)) {\n    return true;\n  }\n\n  if (o3 === 0 && onSegment(p2x, p2y, p1x, p1y, q2x, q2y)) {\n    return true;\n  }\n\n  if (o4 === 0 && onSegment(p2x, p2y, q1x, q1y, q2x, q2y)) {\n    return true;\n  }\n\n  return false;\n},\n    isWithinPolygon = function isWithinPolygon(x, y, cx, cy, r, sides, startAngle) {\n  var i,\n      extreme = Infinity,\n      angle,\n      count = 0,\n      p1x,\n      p2x,\n      p2y,\n      p1y,\n      inangle,\n      inside = false;\n\n  if (isWithinCircle(x, y, cx, cy, r) && sides >= 3) {\n    angle = startAngle === UNDEF ? mathPI * .5 : rad(startAngle);\n    inangle = 2 * mathPI / sides;\n    p1x = cx + r * mathCos(-angle);\n    p1y = cy + r * mathSin(-angle);\n\n    for (i = 0; i < sides; i++) {\n      angle += inangle;\n      p2x = cx + r * mathCos(-angle);\n      p2y = cy + r * mathSin(-angle);\n\n      if (doIntersect(p1x, p1y, p2x, p2y, x, y, extreme, y)) {\n        if (orientation(p1x, p1y, x, y, p2x, p2y) === 0) {\n          return onSegment(p1x, p1y, x, y, p2x, p2y);\n        }\n\n        count++;\n      }\n\n      p1x = p2x;\n      p1y = p2y;\n    }\n\n    inside = count % 2 !== 0;\n  }\n\n  return inside;\n},\n    _compair2closest = function _compair2closest(p1, p2) {\n  if (!p1 || p1 && p2 && p2.i > p1.i) {\n    return p2;\n  }\n\n  return p1;\n};\n\nfunction kdTreeAbs(kdArray) {\n  \"use strict\";\n\n  var arr = kdArray,\n      tolerance = arr && arr[0] && arr[0].r || 5,\n      i,\n      max = Math.max,\n      floor = Math.floor,\n      sqrt = Math.sqrt,\n      min = Math.min,\n      log = Math.log,\n      exp = Math.exp,\n      pow = Math.pow,\n      _quickselectX,\n      _quickselectY;\n\n  function swap(array, swapindexi, swapindexj) {\n    var tmp = array[swapindexi];\n    array[swapindexi] = array[swapindexj];\n    array[swapindexj] = tmp;\n  }\n\n  _quickselectX = function quickselectX(copyArr, indexk, lft, rght) {\n    var n,\n        m,\n        z,\n        s,\n        sd,\n        newLeft,\n        newRight,\n        t,\n        indexi,\n        indexj,\n        left = lft,\n        right = rght;\n\n    while (right > left) {\n      if (right - left > 600) {\n        n = right - left + 1;\n        m = indexk - left + 1;\n        z = log(n);\n        s = .5 * exp(2 * z / 3);\n        sd = .5 * sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n        newLeft = max(left, floor(indexk - m * s / n + sd));\n        newRight = min(right, floor(indexk + (n - m) * s / n + sd));\n\n        _quickselectX(copyArr, indexk, newLeft, newRight);\n      }\n\n      t = copyArr[indexk];\n      indexi = left;\n      indexj = right;\n      swap(copyArr, left, indexk);\n\n      if (copyArr[right].x > t.x) {\n        swap(copyArr, left, right);\n      }\n\n      while (indexi < indexj) {\n        swap(copyArr, indexi, indexj);\n        indexi++;\n        indexj--;\n\n        while (copyArr[indexi].x < t.x) {\n          indexi++;\n        }\n\n        while (copyArr[indexj].x > t.x) {\n          indexj--;\n        }\n      }\n\n      if (copyArr[left].x === t.x) {\n        swap(copyArr, left, indexj);\n      } else {\n        indexj++;\n        swap(copyArr, indexj, right);\n      }\n\n      if (indexj <= indexk) {\n        left = indexj + 1;\n      }\n\n      if (indexk <= indexj) {\n        right = indexj - 1;\n      }\n    }\n  };\n\n  _quickselectY = function quickselectY(array, indexk, lft, rght) {\n    var n,\n        m,\n        z,\n        s,\n        sd,\n        newLeft,\n        newRight,\n        t,\n        indexi,\n        indexj,\n        left = lft,\n        right = rght,\n        copyarr = array;\n\n    while (right > left) {\n      if (right - left > 600) {\n        n = right - left + 1;\n        m = indexk - left + 1;\n        z = log(n);\n        s = .5 * exp(2 * z / 3);\n        sd = .5 * sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n        newLeft = max(left, floor(indexk - m * s / n + sd));\n        newRight = min(right, floor(indexk + (n - m) * s / n + sd));\n\n        _quickselectY(copyarr, indexk, newLeft, newRight);\n      }\n\n      t = copyarr[indexk];\n      indexi = left;\n      indexj = right;\n      swap(copyarr, left, indexk);\n\n      if (copyarr[right].y > t.y) {\n        swap(copyarr, left, right);\n      }\n\n      while (indexi < indexj) {\n        swap(copyarr, indexi, indexj);\n        indexi++;\n        indexj--;\n\n        while (copyarr[indexi].y < t.y) {\n          indexi++;\n        }\n\n        while (copyarr[indexj].y > t.y) {\n          indexj--;\n        }\n      }\n\n      if (copyarr[left].y === t.y) {\n        swap(copyarr, left, indexj);\n      } else {\n        indexj++;\n        swap(copyarr, indexj, right);\n      }\n\n      if (indexj <= indexk) {\n        left = indexj + 1;\n      }\n\n      if (indexk <= indexj) {\n        right = indexj - 1;\n      }\n    }\n  };\n\n  arr = arr || [];\n\n  for (i = arr.length; i--;) {\n    if (arr[i].r > tolerance) {\n      tolerance = arr[i].r;\n    }\n\n    arr[i].i = i;\n    arr[i].x = +arr[i].x;\n    arr[i].y = +arr[i].y;\n  }\n\n  function buildKdTree(copyArr, left, right, isY) {\n    var ob = {},\n        mid,\n        access = isY ? \"y\" : \"x\";\n\n    if (left === right) {\n      ob.point = copyArr[left];\n      return ob;\n    }\n\n    if (right - left === 1) {\n      if (copyArr[left][access] > copyArr[right][access]) {\n        ob.point = copyArr[left];\n        ob.left = {\n          point: copyArr[right]\n        };\n      } else {\n        ob.point = copyArr[right];\n        ob.left = {\n          point: copyArr[left]\n        };\n      }\n\n      return ob;\n    }\n\n    mid = left + right >> 1;\n\n    if (isY) {\n      _quickselectY(copyArr, mid, left, right);\n    } else {\n      _quickselectX(copyArr, mid, left, right);\n    }\n\n    ob.point = copyArr[mid];\n    ob.left = buildKdTree(copyArr, left, mid - 1, !isY);\n    ob.right = buildKdTree(copyArr, mid + 1, right, !isY);\n    return ob;\n  }\n\n  return {\n    tree: arr.length === 0 ? {} : buildKdTree(arr, 0, arr.length - 1, false),\n    search: function search(x, y, type, opts) {\n      var tree = this.tree,\n          options = opts,\n          res,\n          x1 = x - tolerance,\n          x2 = x + tolerance,\n          y1 = y - tolerance,\n          y2 = y + tolerance,\n          lastHovered = false,\n          lastDist = 0,\n          searchX,\n          searchY;\n      options = options || {};\n\n      function calcDist(distx, disty, distp, distq) {\n        return sqrt(pow(distx - distp, 2) + pow(disty - distq, 2));\n      }\n\n      function inRange(a, b) {\n        if (type === \"circle\") {\n          return calcDist(a, b, x, y) <= x1;\n        }\n\n        return a >= x1 && a <= x2 && b >= y1 && b <= y2;\n      }\n\n      function inRangeApply(a, r1, r2) {\n        return a >= r1 && a <= r2;\n      }\n\n      function apply(ob) {\n        var currentHovered = inRangeApply(x, ob.x1, ob.x2) && inRangeApply(y, ob.y1, ob.y2),\n            currentDist = calcDist(x, y, ob.point.x, ob.point.y);\n\n        if (!res) {\n          res = ob;\n          lastHovered = currentHovered;\n          lastDist = currentDist;\n          return;\n        }\n\n        if (currentHovered) {\n          if (lastHovered) {\n            if (ob.point.i > res.point.i) {\n              res = ob;\n              lastHovered = currentHovered;\n              lastDist = currentDist;\n            }\n          } else {\n            res = ob;\n            lastHovered = currentHovered;\n            lastDist = currentDist;\n          }\n        } else {\n          if (!lastHovered) {\n            if (currentDist < lastDist) {\n              res = ob;\n              lastHovered = currentHovered;\n              lastDist = currentDist;\n            }\n          }\n        }\n      }\n\n      function defineSearchArea(rx, ry) {\n        if (type === \"circle\") {\n          x1 = rx;\n        } else {\n          x1 = x - rx || 0;\n          x2 = x + rx || 0;\n          y1 = y - ry || 0;\n          y2 = y + ry || 0;\n        }\n      }\n\n      searchY = function searchY(ob) {\n        var rx, ry;\n\n        if (!ob || !ob.point) {\n          return;\n        }\n\n        rx = options.rx || ob.point.r;\n        ry = options.ry || ob.point.r;\n        defineSearchArea(rx, ry);\n\n        if (inRange(ob.point.x, ob.point.y)) {\n          apply(ob);\n        }\n\n        if (y1 <= ob.point.y) {\n          searchX(ob.left);\n        }\n\n        if (y2 >= ob.point.y) {\n          searchX(ob.right);\n        }\n      };\n\n      searchX = function searchX(ob) {\n        var rx, ry;\n\n        if (!ob || !ob.point) {\n          return;\n        }\n\n        rx = options.rx || ob.point.r;\n        ry = options.ry || ob.point.r;\n        defineSearchArea(rx, ry);\n\n        if (inRange(ob.point.x, ob.point.y)) {\n          apply(ob);\n        }\n\n        if (x1 <= ob.point.x) {\n          searchY(ob.left);\n        }\n\n        if (x2 >= ob.point.x) {\n          searchY(ob.right);\n        }\n      };\n\n      searchX(tree);\n      return res && res.point || res;\n    }\n  };\n}\n\nvar KdTree = function () {\n  function KdTree(shape) {\n    var kdTreeObj = this;\n    kdTreeObj.configure(shape);\n  }\n\n  var _proto = KdTree.prototype;\n\n  _proto.configure = function configure(shape) {\n    var kdTreeObj = this;\n    kdTreeObj.validatorFn = shape ? kdTreeObj.shapeValidator() : kdTreeObj.defaultValidator();\n  };\n\n  _proto.defaultValidator = function defaultValidator() {\n    var kdTreeObj = this;\n    return function (setElem) {\n      var mousePoint = kdTreeObj.mousePoint;\n      return !!(setElem && Math.pow((setElem.x - mousePoint.x) / kdTreeObj.xLimit, 2) + Math.pow((setElem.y - mousePoint.y) / kdTreeObj.yLimit, 2) <= 1);\n    };\n  };\n\n  _proto.shapeValidator = function shapeValidator() {\n    var kdTreeObj = this;\n    return function (setElem) {\n      var mousePoint = kdTreeObj.mousePoint,\n          shapeInfo = setElem && setElem.shapeInfo,\n          inside = false,\n          type,\n          innerradius,\n          r,\n          x = mousePoint.x,\n          y = mousePoint.y,\n          sides,\n          startAngle,\n          x1,\n          x2,\n          y1,\n          y2;\n      type = shapeInfo && shapeInfo.type;\n\n      switch (type) {\n        case \"circle\":\n          r = shapeInfo.radius;\n          inside = isWithinCircle(x, y, setElem.x, setElem.y, r);\n          break;\n\n        case \"arc\":\n          innerradius = shapeInfo.innerradius;\n          r = shapeInfo.radius;\n          inside = !isWithinCircle(x, y, setElem.x, setElem.y, innerradius) && isWithinCircle(x, y, setElem.x, setElem.y, r);\n          break;\n\n        case \"polygon\":\n          r = shapeInfo.radius;\n          startAngle = shapeInfo.startAngle;\n          sides = shapeInfo.sides;\n          inside = isWithinPolygon(x, y, setElem.x, setElem.y, r, sides, startAngle);\n          break;\n\n        case \"rect\":\n        case \"rectangle\":\n          x1 = setElem.x;\n          y1 = setElem.y;\n          x2 = x1 + (shapeInfo.width || 0);\n          y2 = y1 + (shapeInfo.height || 0);\n          inside = x >= x1 && x <= x2 && y >= y1 && y <= y2;\n          break;\n\n        case \"default\":\n          inside = false;\n          break;\n      }\n\n      return inside;\n    };\n  };\n\n  _proto.buildKdTree = function buildKdTree(points) {\n    this.kdTree = kdTreeAbs(points);\n    this.tree = this.kdTree.tree;\n    return this;\n  };\n\n  _proto.getNeighbour = function getNeighbour(point, basicSearch, type) {\n    var kDTreeObj = this,\n        tree = kDTreeObj.tree,\n        limitBox = {\n      x1: point.x - kDTreeObj.xLimit,\n      x2: point.x + kDTreeObj.xLimit,\n      y1: point.y - kDTreeObj.yLimit,\n      y2: point.y + kDTreeObj.yLimit\n    },\n        validatorFn = kDTreeObj.validatorFn;\n    kDTreeObj.mousePoint = point;\n\n    if (basicSearch) {\n      return this.kdTree && this.kdTree.search(point.x, point.y, type, point.options);\n    }\n\n    if (tree) {\n      return kDTreeObj._searchBtwnLimit(limitBox, tree, true, validatorFn);\n    }\n  };\n\n  _proto._searchBtwnLimit = function _searchBtwnLimit(limitBox, tree, isX, validatorFn) {\n    var point,\n        returnPoint,\n        kdTreeObj = this,\n        axis = isX ? \"x\" : \"y\",\n        lowerLimit = isX ? limitBox.x1 : limitBox.y1,\n        upperLimit = isX ? limitBox.x2 : limitBox.y2;\n    point = tree && tree.point && tree.point[axis];\n\n    if (point === UNDEF) {\n      return;\n    }\n\n    if (validatorFn(tree.point)) {\n      returnPoint = tree.point;\n    }\n\n    if (point >= lowerLimit && tree.left) {\n      returnPoint = _compair2closest(returnPoint, kdTreeObj._searchBtwnLimit(limitBox, tree.left, !isX, validatorFn));\n    }\n\n    if (point <= upperLimit && tree.right) {\n      returnPoint = _compair2closest(returnPoint, kdTreeObj._searchBtwnLimit(limitBox, tree.right, !isX, validatorFn));\n    }\n\n    return returnPoint;\n  };\n\n  _proto._setSearchLimit = function _setSearchLimit(xLimit, yLimit) {\n    var kdTree = this;\n    kdTree.xLimit = xLimit;\n    kdTree.yLimit = yLimit;\n  };\n\n  return KdTree;\n}();\n\nKdTree.prototype.constructor = KdTree;\nvar _default = KdTree;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/moham/OneDrive/Desktop/04_06_2021/henaknowledge/frontend v3/henaknowledgefrontend/node_modules/@fusioncharts/charts/src/dataset/_internal/kdtree.js"],"names":["exports","__esModule","default","UNDEF","isWithinCircle","x","y","cx","cy","r","Math","pow","mathPI","PI","mathCos","cos","mathSin","sin","mathMax","max","mathMin","min","deg2rad","rad","deg","orientation","p1x","p1y","q1x","q1y","p2x","p2y","A","B","C","D","val1","val2","val","isNaN","onSegment","doIntersect","q2x","q2y","o1","o2","o3","o4","isWithinPolygon","sides","startAngle","i","extreme","Infinity","angle","count","inangle","inside","_compair2closest","p1","p2","kdTreeAbs","kdArray","arr","tolerance","floor","sqrt","log","exp","_quickselectX","_quickselectY","swap","array","swapindexi","swapindexj","tmp","quickselectX","copyArr","indexk","lft","rght","n","m","z","s","sd","newLeft","newRight","t","indexi","indexj","left","right","quickselectY","copyarr","length","buildKdTree","isY","ob","mid","access","point","tree","search","type","opts","options","res","x1","x2","y1","y2","lastHovered","lastDist","searchX","searchY","calcDist","distx","disty","distp","distq","inRange","a","b","inRangeApply","r1","r2","apply","currentHovered","currentDist","defineSearchArea","rx","ry","KdTree","shape","kdTreeObj","configure","_proto","prototype","validatorFn","shapeValidator","defaultValidator","setElem","mousePoint","xLimit","yLimit","shapeInfo","innerradius","radius","width","height","points","kdTree","getNeighbour","basicSearch","kDTreeObj","limitBox","_searchBtwnLimit","isX","returnPoint","axis","lowerLimit","upperLimit","_setSearchLimit","constructor","_default"],"mappings":"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","sourcesContent":["\"use strict\";exports.__esModule=true;exports.default=void 0;var UNDEF,isWithinCircle=function isWithinCircle(x,y,cx,cy,r){return Math.pow(cx-x,2)+Math.pow(cy-y,2)<=Math.pow(r,2)},mathPI=Math.PI,mathCos=Math.cos,mathSin=Math.sin,mathMax=Math.max,mathMin=Math.min,deg2rad=mathPI/180,rad=function rad(deg){return deg%360*deg2rad},orientation=function orientation(p1x,p1y,q1x,q1y,p2x,p2y){var A=q1y-p1y,B=p2x-q1x,C=q1x-p1x,D=p2y-q1y,val1,val2,val;val1=A*B;val2=C*D;if(isNaN(val1)){val1=0}if(isNaN(val2)){val2=0}val=val1-val2;if(val===0){return 0}return val>0?1:2},onSegment=function onSegment(p1x,p1y,q1x,q1y,p2x,p2y){if(q1x<=mathMax(p1x,p2x)&&q1x>=mathMin(p1x,p2x)&&q1y<=mathMax(p1y,p2y)&&q1y>=mathMin(p1y,p2y)){return true}return false},doIntersect=function doIntersect(p1x,p1y,q1x,q1y,p2x,p2y,q2x,q2y){var o1=orientation(p1x,p1y,q1x,q1y,p2x,p2y),o2=orientation(p1x,p1y,q1x,q1y,q2x,q2y),o3=orientation(p2x,p2y,q2x,q2y,p1x,p1y),o4=orientation(p2x,p2y,q2x,q2y,q1x,q1y);if(o1!==o2&&o3!==o4){return true}if(o1===0&&onSegment(p1x,p1y,p2x,p2y,q1x,q1y)){return true}if(o2===0&&onSegment(p1x,p1y,q2x,q2y,q1x,q1y)){return true}if(o3===0&&onSegment(p2x,p2y,p1x,p1y,q2x,q2y)){return true}if(o4===0&&onSegment(p2x,p2y,q1x,q1y,q2x,q2y)){return true}return false},isWithinPolygon=function isWithinPolygon(x,y,cx,cy,r,sides,startAngle){var i,extreme=Infinity,angle,count=0,p1x,p2x,p2y,p1y,inangle,inside=false;if(isWithinCircle(x,y,cx,cy,r)&&sides>=3){angle=startAngle===UNDEF?mathPI*.5:rad(startAngle);inangle=2*mathPI/sides;p1x=cx+r*mathCos(-angle);p1y=cy+r*mathSin(-angle);for(i=0;i<sides;i++){angle+=inangle;p2x=cx+r*mathCos(-angle);p2y=cy+r*mathSin(-angle);if(doIntersect(p1x,p1y,p2x,p2y,x,y,extreme,y)){if(orientation(p1x,p1y,x,y,p2x,p2y)===0){return onSegment(p1x,p1y,x,y,p2x,p2y)}count++}p1x=p2x;p1y=p2y}inside=count%2!==0}return inside},_compair2closest=function _compair2closest(p1,p2){if(!p1||p1&&p2&&p2.i>p1.i){return p2}return p1};function kdTreeAbs(kdArray){\"use strict\";var arr=kdArray,tolerance=arr&&arr[0]&&arr[0].r||5,i,max=Math.max,floor=Math.floor,sqrt=Math.sqrt,min=Math.min,log=Math.log,exp=Math.exp,pow=Math.pow,_quickselectX,_quickselectY;function swap(array,swapindexi,swapindexj){var tmp=array[swapindexi];array[swapindexi]=array[swapindexj];array[swapindexj]=tmp}_quickselectX=function quickselectX(copyArr,indexk,lft,rght){var n,m,z,s,sd,newLeft,newRight,t,indexi,indexj,left=lft,right=rght;while(right>left){if(right-left>600){n=right-left+1;m=indexk-left+1;z=log(n);s=.5*exp(2*z/3);sd=.5*sqrt(z*s*(n-s)/n)*(m-n/2<0?-1:1);newLeft=max(left,floor(indexk-m*s/n+sd));newRight=min(right,floor(indexk+(n-m)*s/n+sd));_quickselectX(copyArr,indexk,newLeft,newRight)}t=copyArr[indexk];indexi=left;indexj=right;swap(copyArr,left,indexk);if(copyArr[right].x>t.x){swap(copyArr,left,right)}while(indexi<indexj){swap(copyArr,indexi,indexj);indexi++;indexj--;while(copyArr[indexi].x<t.x){indexi++}while(copyArr[indexj].x>t.x){indexj--}}if(copyArr[left].x===t.x){swap(copyArr,left,indexj)}else{indexj++;swap(copyArr,indexj,right)}if(indexj<=indexk){left=indexj+1}if(indexk<=indexj){right=indexj-1}}};_quickselectY=function quickselectY(array,indexk,lft,rght){var n,m,z,s,sd,newLeft,newRight,t,indexi,indexj,left=lft,right=rght,copyarr=array;while(right>left){if(right-left>600){n=right-left+1;m=indexk-left+1;z=log(n);s=.5*exp(2*z/3);sd=.5*sqrt(z*s*(n-s)/n)*(m-n/2<0?-1:1);newLeft=max(left,floor(indexk-m*s/n+sd));newRight=min(right,floor(indexk+(n-m)*s/n+sd));_quickselectY(copyarr,indexk,newLeft,newRight)}t=copyarr[indexk];indexi=left;indexj=right;swap(copyarr,left,indexk);if(copyarr[right].y>t.y){swap(copyarr,left,right)}while(indexi<indexj){swap(copyarr,indexi,indexj);indexi++;indexj--;while(copyarr[indexi].y<t.y){indexi++}while(copyarr[indexj].y>t.y){indexj--}}if(copyarr[left].y===t.y){swap(copyarr,left,indexj)}else{indexj++;swap(copyarr,indexj,right)}if(indexj<=indexk){left=indexj+1}if(indexk<=indexj){right=indexj-1}}};arr=arr||[];for(i=arr.length;i--;){if(arr[i].r>tolerance){tolerance=arr[i].r}arr[i].i=i;arr[i].x=+arr[i].x;arr[i].y=+arr[i].y}function buildKdTree(copyArr,left,right,isY){var ob={},mid,access=isY?\"y\":\"x\";if(left===right){ob.point=copyArr[left];return ob}if(right-left===1){if(copyArr[left][access]>copyArr[right][access]){ob.point=copyArr[left];ob.left={point:copyArr[right]}}else{ob.point=copyArr[right];ob.left={point:copyArr[left]}}return ob}mid=left+right>>1;if(isY){_quickselectY(copyArr,mid,left,right)}else{_quickselectX(copyArr,mid,left,right)}ob.point=copyArr[mid];ob.left=buildKdTree(copyArr,left,mid-1,!isY);ob.right=buildKdTree(copyArr,mid+1,right,!isY);return ob}return{tree:arr.length===0?{}:buildKdTree(arr,0,arr.length-1,false),search:function search(x,y,type,opts){var tree=this.tree,options=opts,res,x1=x-tolerance,x2=x+tolerance,y1=y-tolerance,y2=y+tolerance,lastHovered=false,lastDist=0,searchX,searchY;options=options||{};function calcDist(distx,disty,distp,distq){return sqrt(pow(distx-distp,2)+pow(disty-distq,2))}function inRange(a,b){if(type===\"circle\"){return calcDist(a,b,x,y)<=x1}return a>=x1&&a<=x2&&b>=y1&&b<=y2}function inRangeApply(a,r1,r2){return a>=r1&&a<=r2}function apply(ob){var currentHovered=inRangeApply(x,ob.x1,ob.x2)&&inRangeApply(y,ob.y1,ob.y2),currentDist=calcDist(x,y,ob.point.x,ob.point.y);if(!res){res=ob;lastHovered=currentHovered;lastDist=currentDist;return}if(currentHovered){if(lastHovered){if(ob.point.i>res.point.i){res=ob;lastHovered=currentHovered;lastDist=currentDist}}else{res=ob;lastHovered=currentHovered;lastDist=currentDist}}else{if(!lastHovered){if(currentDist<lastDist){res=ob;lastHovered=currentHovered;lastDist=currentDist}}}}function defineSearchArea(rx,ry){if(type===\"circle\"){x1=rx}else{x1=x-rx||0;x2=x+rx||0;y1=y-ry||0;y2=y+ry||0}}searchY=function searchY(ob){var rx,ry;if(!ob||!ob.point){return}rx=options.rx||ob.point.r;ry=options.ry||ob.point.r;defineSearchArea(rx,ry);if(inRange(ob.point.x,ob.point.y)){apply(ob)}if(y1<=ob.point.y){searchX(ob.left)}if(y2>=ob.point.y){searchX(ob.right)}};searchX=function searchX(ob){var rx,ry;if(!ob||!ob.point){return}rx=options.rx||ob.point.r;ry=options.ry||ob.point.r;defineSearchArea(rx,ry);if(inRange(ob.point.x,ob.point.y)){apply(ob)}if(x1<=ob.point.x){searchY(ob.left)}if(x2>=ob.point.x){searchY(ob.right)}};searchX(tree);return res&&res.point||res}}}var KdTree=function(){function KdTree(shape){var kdTreeObj=this;kdTreeObj.configure(shape)}var _proto=KdTree.prototype;_proto.configure=function configure(shape){var kdTreeObj=this;kdTreeObj.validatorFn=shape?kdTreeObj.shapeValidator():kdTreeObj.defaultValidator()};_proto.defaultValidator=function defaultValidator(){var kdTreeObj=this;return function(setElem){var mousePoint=kdTreeObj.mousePoint;return!!(setElem&&Math.pow((setElem.x-mousePoint.x)/kdTreeObj.xLimit,2)+Math.pow((setElem.y-mousePoint.y)/kdTreeObj.yLimit,2)<=1)}};_proto.shapeValidator=function shapeValidator(){var kdTreeObj=this;return function(setElem){var mousePoint=kdTreeObj.mousePoint,shapeInfo=setElem&&setElem.shapeInfo,inside=false,type,innerradius,r,x=mousePoint.x,y=mousePoint.y,sides,startAngle,x1,x2,y1,y2;type=shapeInfo&&shapeInfo.type;switch(type){case\"circle\":r=shapeInfo.radius;inside=isWithinCircle(x,y,setElem.x,setElem.y,r);break;case\"arc\":innerradius=shapeInfo.innerradius;r=shapeInfo.radius;inside=!isWithinCircle(x,y,setElem.x,setElem.y,innerradius)&&isWithinCircle(x,y,setElem.x,setElem.y,r);break;case\"polygon\":r=shapeInfo.radius;startAngle=shapeInfo.startAngle;sides=shapeInfo.sides;inside=isWithinPolygon(x,y,setElem.x,setElem.y,r,sides,startAngle);break;case\"rect\":case\"rectangle\":x1=setElem.x;y1=setElem.y;x2=x1+(shapeInfo.width||0);y2=y1+(shapeInfo.height||0);inside=x>=x1&&x<=x2&&y>=y1&&y<=y2;break;case\"default\":inside=false;break}return inside}};_proto.buildKdTree=function buildKdTree(points){this.kdTree=kdTreeAbs(points);this.tree=this.kdTree.tree;return this};_proto.getNeighbour=function getNeighbour(point,basicSearch,type){var kDTreeObj=this,tree=kDTreeObj.tree,limitBox={x1:point.x-kDTreeObj.xLimit,x2:point.x+kDTreeObj.xLimit,y1:point.y-kDTreeObj.yLimit,y2:point.y+kDTreeObj.yLimit},validatorFn=kDTreeObj.validatorFn;kDTreeObj.mousePoint=point;if(basicSearch){return this.kdTree&&this.kdTree.search(point.x,point.y,type,point.options)}if(tree){return kDTreeObj._searchBtwnLimit(limitBox,tree,true,validatorFn)}};_proto._searchBtwnLimit=function _searchBtwnLimit(limitBox,tree,isX,validatorFn){var point,returnPoint,kdTreeObj=this,axis=isX?\"x\":\"y\",lowerLimit=isX?limitBox.x1:limitBox.y1,upperLimit=isX?limitBox.x2:limitBox.y2;point=tree&&tree.point&&tree.point[axis];if(point===UNDEF){return}if(validatorFn(tree.point)){returnPoint=tree.point}if(point>=lowerLimit&&tree.left){returnPoint=_compair2closest(returnPoint,kdTreeObj._searchBtwnLimit(limitBox,tree.left,!isX,validatorFn))}if(point<=upperLimit&&tree.right){returnPoint=_compair2closest(returnPoint,kdTreeObj._searchBtwnLimit(limitBox,tree.right,!isX,validatorFn))}return returnPoint};_proto._setSearchLimit=function _setSearchLimit(xLimit,yLimit){var kdTree=this;kdTree.xLimit=xLimit;kdTree.yLimit=yLimit};return KdTree}();KdTree.prototype.constructor=KdTree;var _default=KdTree;exports.default=_default;"]},"metadata":{},"sourceType":"script"}