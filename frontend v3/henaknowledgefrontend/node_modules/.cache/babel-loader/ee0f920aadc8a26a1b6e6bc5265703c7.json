{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = _default;\n\nvar _lib = require(\"../../lib\");\n\nvar RGB_STR = \"rgb\",\n    DASH_STR = \"-\",\n    DARK_FILTER_STR = \"darkFilter\",\n    BRIGHT_FILTER_STR = \"brightFilter\",\n    TEXT_OUTLINE = \"text-outline\",\n    NONE = \"none\",\n    SPC = \" \",\n    COLOR_BLACK = \"#000000\",\n    COLOR_WHITE = \"#ffffff\",\n    COLOR_WHITE_MATRIX = \"1 1 1 1 255 1 1 1 1 255 1 1 1 1 255 0 0 0 1 0\",\n    COLOR_BLACK_MATRIX = \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0\",\n    getRGB = function getRGB(rgbColor) {\n  var rgbArr = rgbColor.split(\"(\")[1].split(\")\")[0].split(\",\");\n  return {\n    R: +rgbArr[0],\n    G: +rgbArr[1],\n    B: +rgbArr[2]\n  };\n},\n    determineFilterType = function determineFilterType(rgbObj) {\n  var R = rgbObj.R,\n      G = rgbObj.G,\n      B = rgbObj.B,\n      brightness;\n  brightness = (R * 299 + G * 587 + B * 114) / 1e3;\n  return brightness > 123 ? DARK_FILTER_STR : BRIGHT_FILTER_STR;\n};\n\nfunction _default(R) {\n  if (R.svg) {\n    R.createOutlineFilter = function (configObj) {\n      var paper = configObj.paper,\n          rgbObj = configObj.rgbObj,\n          colorMapText = configObj.colorMapText,\n          filterCache = paper.outlineFilterCaches,\n          filterColorMap = paper.filterColorMap,\n          hash,\n          id,\n          filterType,\n          filterDefs,\n          filter,\n          children;\n      filterType = filterColorMap[colorMapText] = determineFilterType(rgbObj);\n      hash = TEXT_OUTLINE + DASH_STR + [colorMapText, filterType].join(SPC);\n      id = R.getElementID(hash.replace(/[\\(\\)\\s%:,\\xb0#]/g, \"_\"));\n      filterDefs = R.isFirefox ? paper.addDefs({\n        filter: {\n          tagName: \"filter\",\n          id: id,\n          children: [{\n            tagName: \"feMorphology\",\n            result: \"DILATED\",\n            in: \"SourceAlpha\",\n            operator: \"dilate\",\n            radius: R.isIE11 ? \"1.5\" : \"1\"\n          }, {\n            tagName: \"feFlood\",\n            result: \"FLOOD\",\n            \"flood-color\": filterType === DARK_FILTER_STR ? COLOR_BLACK : COLOR_WHITE,\n            \"flood-opacity\": \"1\"\n          }, {\n            tagName: \"feComposite\",\n            result: \"OUTLINE\",\n            in: \"FLOOD\",\n            in2: \"DILATED\",\n            operator: \"in\"\n          }, {\n            tagName: \"feMerge\",\n            children: [{\n              tagName: \"feMergeNode\",\n              in: \"OUTLINE\"\n            }, {\n              tagName: \"feMergeNode\",\n              in: \"SourceGraphic\"\n            }]\n          }]\n        }\n      }) : paper.addDefs({\n        filter: {\n          tagName: \"filter\",\n          id: id,\n          children: [{\n            tagName: \"feColorMatrix\",\n            result: \"COLORED\",\n            in: \"SourceGraphic\",\n            type: \"matrix\",\n            values: filterType === DARK_FILTER_STR ? COLOR_BLACK_MATRIX : COLOR_WHITE_MATRIX\n          }, {\n            tagName: \"feOffset\",\n            dx: \"1\",\n            dy: \"1\",\n            result: \"OFFSET11\",\n            in: \"COLORED\"\n          }, {\n            tagName: \"feOffset\",\n            dx: \"-1\",\n            dy: \"-1\",\n            result: \"OFFSET-1-1\",\n            in: \"COLORED\"\n          }, {\n            tagName: \"feOffset\",\n            dx: \"-1\",\n            dy: \"1\",\n            result: \"OFFSET-11\",\n            in: \"COLORED\"\n          }, {\n            tagName: \"feOffset\",\n            dx: \"1\",\n            dy: \"-1\",\n            result: \"OFFSET1-1\",\n            in: \"COLORED\"\n          }, {\n            tagName: \"feMerge\",\n            children: [{\n              tagName: \"feMergeNode\",\n              in: \"OFFSET1-1\"\n            }, {\n              tagName: \"feMergeNode\",\n              in: \"OFFSET-1-1\"\n            }, {\n              tagName: \"feMergeNode\",\n              in: \"OFFSET11\"\n            }, {\n              tagName: \"feMergeNode\",\n              in: \"OFFSET-11\"\n            }, {\n              tagName: \"feMergeNode\",\n              in: \"SourceGraphic\"\n            }]\n          }]\n        }\n      });\n      children = filterDefs.filter.children;\n      filter = filterCache[filterType] = {\n        hash: hash,\n        id: id,\n        filter: filterDefs.filter.element,\n        morph: children[0].element,\n        flood: children[1].element,\n        composite: children[2].element,\n        merge: children[3].element\n      };\n      return filter;\n    };\n\n    R.el.outlineText = function (outline, color) {\n      var rgbColor;\n\n      if (!color || color === NONE) {\n        return;\n      }\n\n      if (/(^#[0-9A-Fa-f]{6}$)|(^#[0-9A-Fa-f]{3}$)/.test(color)) {\n        rgbColor = (0, _lib.convertColor)(color);\n      } else {\n        rgbColor = color;\n      }\n\n      var elem = this,\n          node = elem.node,\n          paper = elem.paper,\n          filterCache = paper.outlineFilterCaches || (paper.outlineFilterCaches = {}),\n          filterColorMap = paper.filterColorMap || (paper.filterColorMap = {}),\n          filterType,\n          outLineFilter,\n          rgbObj = getRGB(rgbColor),\n          colorMapText = RGB_STR + DASH_STR + rgbObj.R + DASH_STR + rgbObj.G + DASH_STR + rgbObj.B;\n\n      if (outline) {\n        filterType = filterColorMap[colorMapText];\n\n        if (filterType && filterCache[filterType]) {\n          outLineFilter = filterCache[filterType];\n        } else {\n          outLineFilter = R.createOutlineFilter({\n            rgbObj: rgbObj,\n            paper: paper,\n            colorMapText: colorMapText\n          });\n        }\n\n        node.setAttribute(\"filter\", 'url(\"' + R._url + \"#\" + outLineFilter.id + '\")');\n      } else {\n        node.removeAttribute(\"filter\");\n      }\n    };\n  } else {\n    R.el.outlineText = function () {\n      return this;\n    };\n  }\n}","map":{"version":3,"sources":["C:/Users/moham/OneDrive/Desktop/04_06_2021/henaknowledge/frontend v3/henaknowledgefrontend/node_modules/@fusioncharts/core/src/_internal/redraphael/redraphael.textoutline.js"],"names":["exports","__esModule","default","_default","_lib","require","RGB_STR","DASH_STR","DARK_FILTER_STR","BRIGHT_FILTER_STR","TEXT_OUTLINE","NONE","SPC","COLOR_BLACK","COLOR_WHITE","COLOR_WHITE_MATRIX","COLOR_BLACK_MATRIX","getRGB","rgbColor","rgbArr","split","R","G","B","determineFilterType","rgbObj","brightness","svg","createOutlineFilter","configObj","paper","colorMapText","filterCache","outlineFilterCaches","filterColorMap","hash","id","filterType","filterDefs","filter","children","join","getElementID","replace","isFirefox","addDefs","tagName","result","in","operator","radius","isIE11","in2","type","values","dx","dy","element","morph","flood","composite","merge","el","outlineText","outline","color","test","convertColor","elem","node","outLineFilter","setAttribute","_url","removeAttribute"],"mappings":"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","sourcesContent":["\"use strict\";exports.__esModule=true;exports.default=_default;var _lib=require(\"../../lib\");var RGB_STR=\"rgb\",DASH_STR=\"-\",DARK_FILTER_STR=\"darkFilter\",BRIGHT_FILTER_STR=\"brightFilter\",TEXT_OUTLINE=\"text-outline\",NONE=\"none\",SPC=\" \",COLOR_BLACK=\"#000000\",COLOR_WHITE=\"#ffffff\",COLOR_WHITE_MATRIX=\"1 1 1 1 255 1 1 1 1 255 1 1 1 1 255 0 0 0 1 0\",COLOR_BLACK_MATRIX=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0\",getRGB=function getRGB(rgbColor){var rgbArr=rgbColor.split(\"(\")[1].split(\")\")[0].split(\",\");return{R:+rgbArr[0],G:+rgbArr[1],B:+rgbArr[2]}},determineFilterType=function determineFilterType(rgbObj){var R=rgbObj.R,G=rgbObj.G,B=rgbObj.B,brightness;brightness=(R*299+G*587+B*114)/1e3;return brightness>123?DARK_FILTER_STR:BRIGHT_FILTER_STR};function _default(R){if(R.svg){R.createOutlineFilter=function(configObj){var paper=configObj.paper,rgbObj=configObj.rgbObj,colorMapText=configObj.colorMapText,filterCache=paper.outlineFilterCaches,filterColorMap=paper.filterColorMap,hash,id,filterType,filterDefs,filter,children;filterType=filterColorMap[colorMapText]=determineFilterType(rgbObj);hash=TEXT_OUTLINE+DASH_STR+[colorMapText,filterType].join(SPC);id=R.getElementID(hash.replace(/[\\(\\)\\s%:,\\xb0#]/g,\"_\"));filterDefs=R.isFirefox?paper.addDefs({filter:{tagName:\"filter\",id:id,children:[{tagName:\"feMorphology\",result:\"DILATED\",in:\"SourceAlpha\",operator:\"dilate\",radius:R.isIE11?\"1.5\":\"1\"},{tagName:\"feFlood\",result:\"FLOOD\",\"flood-color\":filterType===DARK_FILTER_STR?COLOR_BLACK:COLOR_WHITE,\"flood-opacity\":\"1\"},{tagName:\"feComposite\",result:\"OUTLINE\",in:\"FLOOD\",in2:\"DILATED\",operator:\"in\"},{tagName:\"feMerge\",children:[{tagName:\"feMergeNode\",in:\"OUTLINE\"},{tagName:\"feMergeNode\",in:\"SourceGraphic\"}]}]}}):paper.addDefs({filter:{tagName:\"filter\",id:id,children:[{tagName:\"feColorMatrix\",result:\"COLORED\",in:\"SourceGraphic\",type:\"matrix\",values:filterType===DARK_FILTER_STR?COLOR_BLACK_MATRIX:COLOR_WHITE_MATRIX},{tagName:\"feOffset\",dx:\"1\",dy:\"1\",result:\"OFFSET11\",in:\"COLORED\"},{tagName:\"feOffset\",dx:\"-1\",dy:\"-1\",result:\"OFFSET-1-1\",in:\"COLORED\"},{tagName:\"feOffset\",dx:\"-1\",dy:\"1\",result:\"OFFSET-11\",in:\"COLORED\"},{tagName:\"feOffset\",dx:\"1\",dy:\"-1\",result:\"OFFSET1-1\",in:\"COLORED\"},{tagName:\"feMerge\",children:[{tagName:\"feMergeNode\",in:\"OFFSET1-1\"},{tagName:\"feMergeNode\",in:\"OFFSET-1-1\"},{tagName:\"feMergeNode\",in:\"OFFSET11\"},{tagName:\"feMergeNode\",in:\"OFFSET-11\"},{tagName:\"feMergeNode\",in:\"SourceGraphic\"}]}]}});children=filterDefs.filter.children;filter=filterCache[filterType]={hash:hash,id:id,filter:filterDefs.filter.element,morph:children[0].element,flood:children[1].element,composite:children[2].element,merge:children[3].element};return filter};R.el.outlineText=function(outline,color){var rgbColor;if(!color||color===NONE){return}if(/(^#[0-9A-Fa-f]{6}$)|(^#[0-9A-Fa-f]{3}$)/.test(color)){rgbColor=(0,_lib.convertColor)(color)}else{rgbColor=color}var elem=this,node=elem.node,paper=elem.paper,filterCache=paper.outlineFilterCaches||(paper.outlineFilterCaches={}),filterColorMap=paper.filterColorMap||(paper.filterColorMap={}),filterType,outLineFilter,rgbObj=getRGB(rgbColor),colorMapText=RGB_STR+DASH_STR+rgbObj.R+DASH_STR+rgbObj.G+DASH_STR+rgbObj.B;if(outline){filterType=filterColorMap[colorMapText];if(filterType&&filterCache[filterType]){outLineFilter=filterCache[filterType]}else{outLineFilter=R.createOutlineFilter({rgbObj:rgbObj,paper:paper,colorMapText:colorMapText})}node.setAttribute(\"filter\",'url(\"'+R._url+\"#\"+outLineFilter.id+'\")')}else{node.removeAttribute(\"filter\")}}}else{R.el.outlineText=function(){return this}}}"]},"metadata":{},"sourceType":"script"}