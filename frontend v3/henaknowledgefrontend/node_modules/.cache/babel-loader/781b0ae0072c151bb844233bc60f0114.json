{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.convertColor = convertColor;\nexports.getDarkColor = getDarkColor;\nexports.getLightColor = getLightColor;\nexports.mapSymbolName = mapSymbolName;\nexports.getColumnColor = getColumnColor;\nexports.getPointColor = getPointColor;\nexports.getAngle = getAngle;\nexports.parseColor = parseColor;\nexports.getValidColor = getValidColor;\nexports.RGBtoHex = RGBtoHex;\nexports.rawRGBtoHEX = rawRGBtoHEX;\nexports.HEXtoRGB = HEXtoRGB;\nexports.parsePointValue = parsePointValue;\nexports.getFirstColor = getFirstColor;\nexports.getFirstAlpha = getFirstAlpha;\nvar symbolStr = {\n  circle: \"circle\",\n  triangle: \"triangle\",\n  square: \"square\",\n  diamond: \"diamond\",\n  poly: \"poly_\",\n  spoke: \"spoke_\"\n},\n    UNDEF,\n    COLOR_BLACK = \"000000\",\n    COLOR_WHITE = \"FFFFFF\",\n    mathAbs = Math.abs,\n    stripWhitespace = /\\s+/g,\n    dropHash = /^#?/,\n    validhexcolor = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i,\n    COMMA = \",\",\n    BGRATIOSTRING,\n    startsRGBA = /^rgba/i,\n    cleanColorCode = /[#\\s]/gi,\n    BLANK = \"\",\n    HASHSTRING = \"#\";\n\nfunction parsePointValue(_value, abs) {\n  var value = _value;\n  value = !value && value !== false && value !== 0 ? NaN : Number(value);\n  return isNaN(value) ? null : abs ? mathAbs(value) : value;\n}\n\nfunction getFirstColor(_color, index) {\n  var color = _color;\n  color = color.split(COMMA)[index || 0];\n  color = color.replace(stripWhitespace, BLANK);\n\n  if (color === BLANK) {\n    color = COLOR_BLACK;\n  }\n\n  return color.replace(dropHash, HASHSTRING);\n}\n\nfunction getFirstAlpha(_alpha) {\n  var alpha = _alpha;\n  alpha = parseInt(alpha, 10);\n\n  if (isNaN(alpha) || alpha > 100 || alpha < 0) {\n    alpha = 100;\n  }\n\n  return alpha;\n}\n\nfunction getAlpha(_alpha, multiplier) {\n  var alpha = _alpha;\n  alpha = Number(alpha);\n  alpha = isNaN(alpha) ? 100 : alpha;\n\n  if (multiplier !== UNDEF) {\n    alpha = alpha * multiplier / 100;\n  }\n\n  return alpha % 101;\n}\n\nfunction parseAlpha(alpha, length, _multiplier) {\n  var alphaArr = alpha.split(COMMA),\n      x,\n      multiplier = _multiplier;\n\n  if (multiplier !== UNDEF) {\n    multiplier = Number(multiplier.split(COMMA)[0]);\n  }\n\n  multiplier = isNaN(multiplier) ? UNDEF : multiplier;\n  alphaArr[0] = getAlpha(alphaArr[0], multiplier);\n\n  for (x = 1; x < length; x += 1) {\n    alphaArr[x] = alphaArr[0] * getAlpha(alphaArr[x], multiplier) / 100;\n  }\n\n  return alphaArr.join(COMMA);\n}\n\nfunction convertColor(color, _alpha, rgba) {\n  var R = 0,\n      G = 0,\n      B = 0,\n      colorStr,\n      tempArr,\n      alpha = _alpha;\n\n  if (rgba && rgba.match(startsRGBA)) {\n    tempArr = rgba.split(COMMA);\n    R = tempArr[0].slice(tempArr[0].indexOf(\"(\") + 1);\n    G = tempArr[1];\n    B = tempArr[2];\n\n    if (!alpha && alpha !== 0) {\n      alpha = parseInt(tempArr[3].slice(0, tempArr[3].indexOf(\")\")) * 100, 10);\n    }\n  }\n\n  if (color) {\n    if (color.match(startsRGBA)) {\n      tempArr = color.split(COMMA);\n      R = tempArr[0].slice(tempArr[0].indexOf(\"(\") + 1);\n      G = tempArr[1];\n      B = tempArr[2];\n    } else {\n      colorStr = color.replace(cleanColorCode, BLANK).split(COMMA)[0];\n\n      switch (colorStr.length) {\n        case 3:\n          colorStr = colorStr.charAt(0) + colorStr.charAt(0) + colorStr.charAt(1) + colorStr.charAt(1) + colorStr.charAt(2) + colorStr.charAt(2);\n          break;\n\n        case 6:\n          break;\n\n        default:\n          colorStr = (colorStr + COLOR_WHITE).slice(0, 6);\n          break;\n      }\n\n      R = parseInt(colorStr.slice(0, 2), 16) || 0;\n      G = parseInt(colorStr.slice(2, 4), 16) || 0;\n      B = parseInt(colorStr.slice(4, 6), 16) || 0;\n    }\n  }\n\n  if (!alpha && alpha !== 0) {\n    alpha = 100;\n  }\n\n  if (typeof alpha === \"string\") {\n    alpha = alpha.split(COMMA)[0];\n  }\n\n  alpha = parseInt(alpha, 10) / 100;\n  return \"rgba(\" + R + COMMA + G + COMMA + B + COMMA + alpha + \")\";\n}\n\nfunction getDarkColor(_color, _offsetPercent) {\n  var color = _color,\n      offsetPercent = _offsetPercent;\n  offsetPercent = offsetPercent < 0 || offsetPercent > 100 ? 100 : offsetPercent;\n  offsetPercent = offsetPercent / 100;\n  color = color.replace(cleanColorCode, BLANK);\n  var sourceclrRGB = parseInt(color, 16),\n      R = Math.floor(sourceclrRGB / 65536),\n      G = Math.floor((sourceclrRGB - R * 65536) / 256),\n      B = sourceclrRGB - R * 65536 - G * 256;\n  return (COLOR_BLACK + (R * offsetPercent << 16 | G * offsetPercent << 8 | B * offsetPercent).toString(16)).slice(-6);\n}\n\nfunction getLightColor(_color, _offsetPercent) {\n  var color = _color,\n      offsetPercent = _offsetPercent;\n  offsetPercent = offsetPercent < 0 || offsetPercent > 100 ? 100 : offsetPercent;\n  offsetPercent = offsetPercent / 100;\n  color = color.replace(cleanColorCode, BLANK);\n  var sourceclrRGB = parseInt(color, 16),\n      R = Math.floor(sourceclrRGB / 65536),\n      G = Math.floor((sourceclrRGB - R * 65536) / 256),\n      B = sourceclrRGB - R * 65536 - G * 256;\n  return (COLOR_BLACK + (256 - (256 - R) * offsetPercent << 16 | 256 - (256 - G) * offsetPercent << 8 | 256 - (256 - B) * offsetPercent).toString(16)).slice(-6);\n}\n\nfunction mapSymbolName(_num, isSpoke) {\n  var x = symbolStr.circle,\n      num = _num;\n  num = parsePointValue(num);\n\n  if (num >= 3) {\n    x = (isSpoke ? symbolStr.spoke : symbolStr.poly) + num;\n  }\n\n  return x;\n}\n\nfunction getColumnColor(_setColor, _setAlpha, ratio, angle, isRoundEdges, bdColor, bdAlpha, isBar, is3D) {\n  var bgColor,\n      colorArr,\n      alphaArr,\n      bdColorArr,\n      color,\n      alpha,\n      bdAlphaArr,\n      setColor = _setColor,\n      setAlpha = _setAlpha;\n  colorArr = setColor.split(COMMA);\n  alphaArr = setAlpha.split(COMMA);\n  bdColorArr = bdColor.split(COMMA);\n  bdAlphaArr = bdAlpha.split(COMMA);\n  setColor = setColor.replace(/\\s/g, BLANK).replace(/\\,$/, BLANK);\n\n  if (is3D) {\n    bgColor = {\n      FCcolor: {\n        color: colorArr[0],\n        alpha: alphaArr[0]\n      }\n    };\n  } else if (isRoundEdges) {\n    color = colorArr[0];\n    alpha = alphaArr[0];\n    bgColor = {\n      FCcolor: {\n        color: getDarkColor(color, 75) + COMMA + getLightColor(color, 10) + COMMA + getDarkColor(color, 90) + COMMA + getLightColor(color, 55) + COMMA + getDarkColor(color, 80),\n        alpha: alpha + COMMA + alpha + COMMA + alpha + COMMA + alpha + COMMA + alpha,\n        ratio: \"0,11,14,57,18\",\n        angle: isBar ? \"90\" : \"0\"\n      }\n    };\n    bdColorArr = [getDarkColor(color, 70)];\n  } else {\n    setAlpha = parseAlpha(setAlpha, colorArr.length);\n    bgColor = {\n      FCcolor: {\n        color: setColor,\n        alpha: setAlpha,\n        ratio: ratio,\n        angle: isBar ? -angle : angle\n      }\n    };\n  }\n\n  return [bgColor, {\n    FCcolor: {\n      color: bdColorArr[0],\n      alpha: bdAlphaArr[0]\n    }\n  }];\n}\n\nfunction getPointColor(_color, _alpha) {\n  var color = getFirstColor(_color),\n      alpha = getFirstAlpha(_alpha);\n  return {\n    FCcolor: {\n      gradientUnits: \"objectBoundingBox\",\n      cx: .4,\n      cy: .4,\n      r: \"100%\",\n      color: getLightColor(color, 70) + COMMA + getDarkColor(color, 50),\n      alpha: alpha + COMMA + alpha,\n      ratio: BGRATIOSTRING,\n      radialGradient: true\n    }\n  };\n}\n\nfunction getAngle(width, height, type) {\n  var angle = Math.atan(height / width) * 180 / Math.PI;\n\n  if (type === 2) {\n    angle = 180 - angle;\n  } else if (type === 3) {\n    angle += 180;\n  } else if (type === 4) {\n    angle = 360 - angle;\n  }\n\n  return angle;\n}\n\nfunction parseColor(color) {\n  return color.replace(cleanColorCode, BLANK).replace(dropHash, HASHSTRING);\n}\n\nfunction getValidColor(color) {\n  return validhexcolor.test(parseColor(color)) && color;\n}\n\nfunction RGBtoHex(rgb) {\n  return (COLOR_BLACK + (rgb[0] << 16 | rgb[1] << 8 | rgb[2]).toString(16)).slice(-6);\n}\n\nfunction rawRGBtoHEX(rawRgb) {\n  var rgb;\n  rgb = rawRgb.match(/[\\d+]+/g).splice(0, 3);\n  return (COLOR_BLACK + (rgb[0] << 16 | rgb[1] << 8 | rgb[2]).toString(16)).slice(-6);\n}\n\nfunction HEXtoRGB(sourceColor) {\n  var sourceClrRGB = parseInt(sourceColor, 16),\n      r = Math.floor(sourceClrRGB / 65536),\n      g = Math.floor((sourceClrRGB - r * 65536) / 256),\n      b = Math.floor(sourceClrRGB - r * 65536 - g * 256);\n  return [r, g, b];\n}","map":{"version":3,"sources":["C:/Users/moham/OneDrive/Desktop/04_06_2021/henaknowledge/frontend v3/henaknowledgefrontend/node_modules/@fusioncharts/core/src/lib/lib-graphics.js"],"names":["exports","__esModule","convertColor","getDarkColor","getLightColor","mapSymbolName","getColumnColor","getPointColor","getAngle","parseColor","getValidColor","RGBtoHex","rawRGBtoHEX","HEXtoRGB","parsePointValue","getFirstColor","getFirstAlpha","symbolStr","circle","triangle","square","diamond","poly","spoke","UNDEF","COLOR_BLACK","COLOR_WHITE","mathAbs","Math","abs","stripWhitespace","dropHash","validhexcolor","COMMA","BGRATIOSTRING","startsRGBA","cleanColorCode","BLANK","HASHSTRING","_value","value","NaN","Number","isNaN","_color","index","color","split","replace","_alpha","alpha","parseInt","getAlpha","multiplier","parseAlpha","length","_multiplier","alphaArr","x","join","rgba","R","G","B","colorStr","tempArr","match","slice","indexOf","charAt","_offsetPercent","offsetPercent","sourceclrRGB","floor","toString","_num","isSpoke","num","_setColor","_setAlpha","ratio","angle","isRoundEdges","bdColor","bdAlpha","isBar","is3D","bgColor","colorArr","bdColorArr","bdAlphaArr","setColor","setAlpha","FCcolor","gradientUnits","cx","cy","r","radialGradient","width","height","type","atan","PI","test","rgb","rawRgb","splice","sourceColor","sourceClrRGB","g","b"],"mappings":"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","sourcesContent":["\"use strict\";exports.__esModule=true;exports.convertColor=convertColor;exports.getDarkColor=getDarkColor;exports.getLightColor=getLightColor;exports.mapSymbolName=mapSymbolName;exports.getColumnColor=getColumnColor;exports.getPointColor=getPointColor;exports.getAngle=getAngle;exports.parseColor=parseColor;exports.getValidColor=getValidColor;exports.RGBtoHex=RGBtoHex;exports.rawRGBtoHEX=rawRGBtoHEX;exports.HEXtoRGB=HEXtoRGB;exports.parsePointValue=parsePointValue;exports.getFirstColor=getFirstColor;exports.getFirstAlpha=getFirstAlpha;var symbolStr={circle:\"circle\",triangle:\"triangle\",square:\"square\",diamond:\"diamond\",poly:\"poly_\",spoke:\"spoke_\"},UNDEF,COLOR_BLACK=\"000000\",COLOR_WHITE=\"FFFFFF\",mathAbs=Math.abs,stripWhitespace=/\\s+/g,dropHash=/^#?/,validhexcolor=/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i,COMMA=\",\",BGRATIOSTRING,startsRGBA=/^rgba/i,cleanColorCode=/[#\\s]/gi,BLANK=\"\",HASHSTRING=\"#\";function parsePointValue(_value,abs){var value=_value;value=!value&&value!==false&&value!==0?NaN:Number(value);return isNaN(value)?null:abs?mathAbs(value):value}function getFirstColor(_color,index){var color=_color;color=color.split(COMMA)[index||0];color=color.replace(stripWhitespace,BLANK);if(color===BLANK){color=COLOR_BLACK}return color.replace(dropHash,HASHSTRING)}function getFirstAlpha(_alpha){var alpha=_alpha;alpha=parseInt(alpha,10);if(isNaN(alpha)||alpha>100||alpha<0){alpha=100}return alpha}function getAlpha(_alpha,multiplier){var alpha=_alpha;alpha=Number(alpha);alpha=isNaN(alpha)?100:alpha;if(multiplier!==UNDEF){alpha=alpha*multiplier/100}return alpha%101}function parseAlpha(alpha,length,_multiplier){var alphaArr=alpha.split(COMMA),x,multiplier=_multiplier;if(multiplier!==UNDEF){multiplier=Number(multiplier.split(COMMA)[0])}multiplier=isNaN(multiplier)?UNDEF:multiplier;alphaArr[0]=getAlpha(alphaArr[0],multiplier);for(x=1;x<length;x+=1){alphaArr[x]=alphaArr[0]*getAlpha(alphaArr[x],multiplier)/100}return alphaArr.join(COMMA)}function convertColor(color,_alpha,rgba){var R=0,G=0,B=0,colorStr,tempArr,alpha=_alpha;if(rgba&&rgba.match(startsRGBA)){tempArr=rgba.split(COMMA);R=tempArr[0].slice(tempArr[0].indexOf(\"(\")+1);G=tempArr[1];B=tempArr[2];if(!alpha&&alpha!==0){alpha=parseInt(tempArr[3].slice(0,tempArr[3].indexOf(\")\"))*100,10)}}if(color){if(color.match(startsRGBA)){tempArr=color.split(COMMA);R=tempArr[0].slice(tempArr[0].indexOf(\"(\")+1);G=tempArr[1];B=tempArr[2]}else{colorStr=color.replace(cleanColorCode,BLANK).split(COMMA)[0];switch(colorStr.length){case 3:colorStr=colorStr.charAt(0)+colorStr.charAt(0)+colorStr.charAt(1)+colorStr.charAt(1)+colorStr.charAt(2)+colorStr.charAt(2);break;case 6:break;default:colorStr=(colorStr+COLOR_WHITE).slice(0,6);break}R=parseInt(colorStr.slice(0,2),16)||0;G=parseInt(colorStr.slice(2,4),16)||0;B=parseInt(colorStr.slice(4,6),16)||0}}if(!alpha&&alpha!==0){alpha=100}if(typeof alpha===\"string\"){alpha=alpha.split(COMMA)[0]}alpha=parseInt(alpha,10)/100;return\"rgba(\"+R+COMMA+G+COMMA+B+COMMA+alpha+\")\"}function getDarkColor(_color,_offsetPercent){var color=_color,offsetPercent=_offsetPercent;offsetPercent=offsetPercent<0||offsetPercent>100?100:offsetPercent;offsetPercent=offsetPercent/100;color=color.replace(cleanColorCode,BLANK);var sourceclrRGB=parseInt(color,16),R=Math.floor(sourceclrRGB/65536),G=Math.floor((sourceclrRGB-R*65536)/256),B=sourceclrRGB-R*65536-G*256;return(COLOR_BLACK+(R*offsetPercent<<16|G*offsetPercent<<8|B*offsetPercent).toString(16)).slice(-6)}function getLightColor(_color,_offsetPercent){var color=_color,offsetPercent=_offsetPercent;offsetPercent=offsetPercent<0||offsetPercent>100?100:offsetPercent;offsetPercent=offsetPercent/100;color=color.replace(cleanColorCode,BLANK);var sourceclrRGB=parseInt(color,16),R=Math.floor(sourceclrRGB/65536),G=Math.floor((sourceclrRGB-R*65536)/256),B=sourceclrRGB-R*65536-G*256;return(COLOR_BLACK+(256-(256-R)*offsetPercent<<16|256-(256-G)*offsetPercent<<8|256-(256-B)*offsetPercent).toString(16)).slice(-6)}function mapSymbolName(_num,isSpoke){var x=symbolStr.circle,num=_num;num=parsePointValue(num);if(num>=3){x=(isSpoke?symbolStr.spoke:symbolStr.poly)+num}return x}function getColumnColor(_setColor,_setAlpha,ratio,angle,isRoundEdges,bdColor,bdAlpha,isBar,is3D){var bgColor,colorArr,alphaArr,bdColorArr,color,alpha,bdAlphaArr,setColor=_setColor,setAlpha=_setAlpha;colorArr=setColor.split(COMMA);alphaArr=setAlpha.split(COMMA);bdColorArr=bdColor.split(COMMA);bdAlphaArr=bdAlpha.split(COMMA);setColor=setColor.replace(/\\s/g,BLANK).replace(/\\,$/,BLANK);if(is3D){bgColor={FCcolor:{color:colorArr[0],alpha:alphaArr[0]}}}else if(isRoundEdges){color=colorArr[0];alpha=alphaArr[0];bgColor={FCcolor:{color:getDarkColor(color,75)+COMMA+getLightColor(color,10)+COMMA+getDarkColor(color,90)+COMMA+getLightColor(color,55)+COMMA+getDarkColor(color,80),alpha:alpha+COMMA+alpha+COMMA+alpha+COMMA+alpha+COMMA+alpha,ratio:\"0,11,14,57,18\",angle:isBar?\"90\":\"0\"}};bdColorArr=[getDarkColor(color,70)]}else{setAlpha=parseAlpha(setAlpha,colorArr.length);bgColor={FCcolor:{color:setColor,alpha:setAlpha,ratio:ratio,angle:isBar?-angle:angle}}}return[bgColor,{FCcolor:{color:bdColorArr[0],alpha:bdAlphaArr[0]}}]}function getPointColor(_color,_alpha){var color=getFirstColor(_color),alpha=getFirstAlpha(_alpha);return{FCcolor:{gradientUnits:\"objectBoundingBox\",cx:.4,cy:.4,r:\"100%\",color:getLightColor(color,70)+COMMA+getDarkColor(color,50),alpha:alpha+COMMA+alpha,ratio:BGRATIOSTRING,radialGradient:true}}}function getAngle(width,height,type){var angle=Math.atan(height/width)*180/Math.PI;if(type===2){angle=180-angle}else if(type===3){angle+=180}else if(type===4){angle=360-angle}return angle}function parseColor(color){return color.replace(cleanColorCode,BLANK).replace(dropHash,HASHSTRING)}function getValidColor(color){return validhexcolor.test(parseColor(color))&&color}function RGBtoHex(rgb){return(COLOR_BLACK+(rgb[0]<<16|rgb[1]<<8|rgb[2]).toString(16)).slice(-6)}function rawRGBtoHEX(rawRgb){var rgb;rgb=rawRgb.match(/[\\d+]+/g).splice(0,3);return(COLOR_BLACK+(rgb[0]<<16|rgb[1]<<8|rgb[2]).toString(16)).slice(-6)}function HEXtoRGB(sourceColor){var sourceClrRGB=parseInt(sourceColor,16),r=Math.floor(sourceClrRGB/65536),g=Math.floor((sourceClrRGB-r*65536)/256),b=Math.floor(sourceClrRGB-r*65536-g*256);return[r,g,b]}"]},"metadata":{},"sourceType":"script"}