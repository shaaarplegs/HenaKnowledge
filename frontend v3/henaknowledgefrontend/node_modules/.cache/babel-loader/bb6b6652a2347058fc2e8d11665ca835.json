{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _eventApi = require(\"@fusioncharts/core/src/event-api\");\n\nvar _lib = require(\"@fusioncharts/core/src/lib\");\n\nvar _isArray = _interopRequireDefault(require(\"@fusioncharts/utils/src/type/is-array\"));\n\nvar _timeConverter = _interopRequireDefault(require(\"@fusioncharts/utils/src/time-converter\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar win = window,\n    FCGlobal,\n    UNDEF,\n    COMMA = \",\",\n    QUOTE = '\"',\n    APOS = \"'\",\n    TAB = \"\\t\",\n    CRLF = \"\\r\\n\",\n    LIT_QUOT = \"{quot}\",\n    LIT_TAB = \"{tab}\",\n    LIT_APOS = \"{apos}\",\n    VALUE_STR = \"Value\",\n    toInt = win.parseInt,\n    toFloat = win.parseFloat,\n    returnFirstArgument = function returnFirstArgument(x) {\n  return x;\n},\n    jsonToCsv,\n    csvToJson,\n    createMultiLevelMap,\n    multiLevelData,\n    multiLevelValue,\n    counter,\n    _recursiveCategoryCall,\n    multiLevelCsv,\n    multiLevelLineCount,\n    headerLen;\n\nvar DSV = function () {\n  function DSV(config) {\n    this.data = [];\n    this.rowCount = 0;\n    this.columnCount = 0;\n    this.configure(config);\n  }\n\n  var _proto = DSV.prototype;\n\n  _proto.set = function set(row, col, value) {\n    var i;\n\n    if (this.rowCount <= row) {\n      for (i = this.rowCount; i <= row; i += 1) {\n        this.data[i] = [];\n      }\n\n      this.rowCount = row + 1;\n    }\n\n    if (this.columnCount <= col) {\n      this.columnCount = col + 1;\n    }\n\n    this.data[row][col] = value;\n  };\n\n  _proto.setRow = function setRow(row, value) {\n    var i;\n\n    if (this.rowCount <= row) {\n      for (i = this.rowCount; i <= row; i += 1) {\n        this.data[i] = [];\n      }\n\n      this.rowCount = row + 1;\n    }\n\n    if (this.columnCount < value.length) {\n      this.columnCount = value.length;\n    }\n\n    this.data[row] = value;\n  };\n\n  _proto.get = function get(row, col) {\n    var data = this.data;\n    return data[row] && data[row][col];\n  };\n\n  _proto.configure = function configure(config) {\n    var decodeLiterals = DSV.decodeLiterals;\n    this.delimiter = decodeLiterals(config.delimiter, COMMA);\n    this.qualifier = decodeLiterals(config.qualifier, QUOTE);\n    this.eolCharacter = decodeLiterals(config.eolCharacter, CRLF);\n    this.numberFormatted = !!toInt(config.numberFormatted, 0);\n  };\n\n  _proto.clear = function clear() {\n    this.data = [];\n    this.rowCount = 0;\n    this.columnCount = 0;\n  };\n\n  _proto.toString = function toString() {\n    var row,\n        col,\n        str = _lib.BLANKSTRING;\n\n    for (row = 0; row < this.rowCount; row += 1) {\n      col = this.qualifier + this.data[row].join(this.qualifier + this.delimiter + this.qualifier) + this.qualifier;\n      str += col === '\"\"' ? this.eolCharacter : col + this.eolCharacter;\n    }\n\n    if (this.rowCount > 0) {\n      str = str.slice(0, str.length - 2);\n    }\n\n    return str;\n  };\n\n  return DSV;\n}();\n\nDSV.decodeLiterals = function (str, defaultValue) {\n  if (str === UNDEF || str === null || !str.toString) {\n    return defaultValue;\n  }\n\n  return str.replace(LIT_TAB, TAB).replace(LIT_QUOT, QUOTE).replace(LIT_APOS, APOS);\n};\n\ncreateMultiLevelMap = function createMultiLevelMap(data) {\n  var tempMap = {},\n      categories = [];\n  (0, _isArray.default)(data) && data.forEach(function (item) {\n    tempMap[item.id] = _objectSpread({}, item);\n    !tempMap[item.id].parent && (tempMap[item.id].isRootNode = true);\n    !tempMap[item.id].categories && (tempMap[item.id].category = []);\n  });\n  data.forEach(function (oriItem) {\n    var item = tempMap[oriItem.id],\n        isValid = false;\n\n    if (item.id && (!item.value || !isNaN(+item.value))) {\n      if (!item.parent || item.parent && tempMap[item.parent]) {\n        isValid = true;\n      }\n    }\n\n    if (!isValid) {\n      delete tempMap[item.id];\n    }\n  });\n\n  for (var key in tempMap) {\n    if (tempMap.hasOwnProperty(key)) {\n      var item = tempMap[key];\n\n      if (item.parent) {\n        tempMap[item.parent].category.push(item);\n      }\n\n      if (item.isRootNode) {\n        categories.push(item);\n      }\n    }\n  }\n\n  return {\n    category: categories\n  };\n};\n\n_recursiveCategoryCall = function recursiveCategoryCall(catObj, csv, columnName) {\n  if (columnName === void 0) {\n    columnName = \"category\";\n  }\n\n  var i;\n  multiLevelData.push(catObj.label || catObj.name || _lib.BLANKSTRING);\n  multiLevelValue.push(isNaN(+catObj.value) ? \"\" : catObj.value);\n  csv.setRow(multiLevelLineCount++, multiLevelData.slice());\n  counter++;\n  headerLen = Math.max(headerLen, counter);\n\n  if (catObj[columnName] !== UNDEF) {\n    for (i = 0; i < catObj[columnName].length; ++i) {\n      _recursiveCategoryCall(catObj[columnName][i], csv, columnName);\n    }\n\n    multiLevelData.pop();\n    counter--;\n  } else {\n    multiLevelData.pop();\n    counter--;\n  }\n};\n\nmultiLevelCsv = function multiLevelCsv(data) {\n  var jsonData = data,\n      chartAttrs = jsonData.chart,\n      columnName = jsonData.data ? \"data\" : \"category\",\n      category = jsonData && jsonData[columnName] || [],\n      categoryLen = category.length,\n      i,\n      header = [],\n      catObj,\n      csv;\n  multiLevelLineCount = 1;\n  headerLen = 0;\n  counter = 0;\n  csv = new DSV({\n    separator: chartAttrs.exportdataseparator,\n    qualifier: chartAttrs.exportdataqualifier,\n    numberFormatted: chartAttrs.exportdataformattedval\n  });\n  multiLevelValue = [];\n\n  for (i = 0; i < categoryLen; ++i) {\n    catObj = category[i];\n    multiLevelData = [];\n\n    _recursiveCategoryCall(catObj, csv, columnName);\n  }\n\n  for (i = 0; i < headerLen; ++i) {\n    header.push(\"Label \" + (i + 1));\n  }\n\n  header.push(\"Value\");\n  csv.setRow(0, header);\n\n  for (i = multiLevelValue.length - 1; i >= 0; i--) {\n    csv.set(i + 1, headerLen, multiLevelValue[i]);\n  }\n\n  return {\n    data: csv.toString(),\n    error: UNDEF,\n    predictedFormat: {\n      multilevel: true\n    }\n  };\n};\n\njsonToCsv = function jsonToCsv(data, fusionCharts) {\n  var jsondata = data,\n      jsVars = fusionCharts && fusionCharts.jsVars,\n      iApi = jsVars && jsVars.instanceAPI,\n      csv,\n      row,\n      column,\n      g,\n      i,\n      j,\n      k,\n      l,\n      chartAttrs = jsondata.chart || jsondata.map || jsondata.graph || {},\n      numberFormatter = iApi && iApi.getFromEnv(\"number-formatter\"),\n      getCleanValue = numberFormatter ? function (val) {\n    return numberFormatter.getCleanValue(val);\n  } : fusionCharts && fusionCharts._getCleanValue ? function (val) {\n    return fusionCharts._getCleanValue(val, chartAttrs);\n  } : returnFirstArgument,\n      forceErrorColumns = Boolean(chartAttrs.exporterrorcolumns || 0),\n      categories = jsondata.categories && jsondata.categories[0] && jsondata.categories[0].category || [],\n      isGeoPlot = jsondata.map && !jsondata.chart || jsVars && jsVars.instanceAPI && jsVars.instanceAPI.defaultSeriesType === \"geo\",\n      isXYPlot = false,\n      isErrorPlot = false,\n      isDiagramPlot = false,\n      isMapPlot = false,\n      isBoxWhisker = false,\n      bwCalc = iApi.getChildren(\"BoxAndWhiskerStatisticalCalc\"),\n      isOHLC = false,\n      hasSum = false,\n      doFormat = returnFirstArgument,\n      predictedFormat = {},\n      tasks = jsondata.tasks ? Array.isArray(jsondata.tasks) ? jsondata.tasks[0].task : jsondata.tasks.task : UNDEF,\n      processes = jsondata.processes ? jsondata.processes.process : UNDEF,\n      dataTable = jsondata.datatable ? Array.isArray(jsondata.datatable) ? jsondata.datatable[0] : jsondata.datatable : UNDEF,\n      dataColumns = dataTable ? dataTable.datacolumn : UNDEF,\n      isGantt = tasks && processes,\n      datasets,\n      lineset,\n      axisset,\n      dataCollectionLength,\n      categoryLength,\n      datasetLength,\n      categoryItem,\n      dataCollection,\n      datasetItem,\n      dataLength,\n      dataItem,\n      dataValue,\n      errorValue,\n      bumpColumnCount,\n      summation = 0,\n      datasetArr,\n      mapRows,\n      mapColumns,\n      entities,\n      entityId,\n      entity,\n      options,\n      dataset,\n      dIndex = -1,\n      dataStore,\n      value,\n      hasNameColumn,\n      firstIndexOfName,\n      parentYAxis,\n      rowItems,\n      addIdColumn,\n      addParentColumn,\n      isTimeseriesChart = fusionCharts.args.type === \"timeseries\",\n      date,\n      isUTC,\n      format,\n      formatter,\n      schema,\n      isLabelrequired,\n      defaultDatasetType = iApi.config.defaultDatasetType,\n      winCount = 0,\n      lossCount = 0,\n      drawsCount = 0,\n      errorCount = 0;\n\n  if (!isTimeseriesChart && (data.category || data.data && data.data[0].data)) {\n    return multiLevelCsv(data);\n  }\n\n  csv = new DSV({\n    separator: chartAttrs.exportdataseparator,\n    qualifier: chartAttrs.exportdataqualifier,\n    numberFormatted: chartAttrs.exportdataformattedval\n  });\n\n  if (FCGlobal.formatNumber && csv.numberFormatted) {\n    doFormat = function doFormat(x, axisIndex) {\n      return FCGlobal.formatNumber(x, chartAttrs, axisIndex);\n    };\n  }\n\n  if (isTimeseriesChart) {\n    schema = jsondata.data.getSchema();\n    isUTC = jsondata.data.isUTCEnabled(schema[0].name);\n    format = schema[0].format;\n    formatter = isUTC ? _timeConverter.default.utcFormatter(format) : _timeConverter.default.formatter(format);\n    datasets = jsondata.data.getData().data;\n\n    for (i = 0; i < schema.length - 1; i += 1) {\n      csv.set(0, i, schema[i].type === \"date\" ? \"Date Time\" : schema[i].name);\n    }\n\n    for (k = 0; k < datasets.length; k += 1) {\n      dataItem = datasets[k];\n      rowItems = [];\n\n      for (j = 0; j < i; j += 1) {\n        if (j === 0) {\n          date = formatter.format(dataItem[j]);\n          rowItems[j] = date;\n        } else {\n          rowItems[j] = (summation += dataItem[j], doFormat(dataItem[j]));\n        }\n      }\n\n      csv.setRow(k + 1, rowItems);\n    }\n  } else {\n    if (isGeoPlot) {\n      predictedFormat.geo = true;\n      datasets = jsVars.instanceAPI.getDatasets();\n      entities = datasets && datasets[0] && datasets[0].components.data || [];\n      csv.setRow(0, [\"Id\", \" Short Name\", \"Long Name\", \"Value\", \"Formatted Value\"]);\n      i = 0;\n\n      for (entityId in entities) {\n        entity = entities[entityId];\n        options = entity.config;\n        value = options.cleanValue;\n\n        if (entity.hidden === true) {\n          continue;\n        }\n\n        csv.setRow(++i, [entityId, options.shortLabel, options.label, value === null ? \"\" : value, options.formattedValue]);\n      }\n    } else if ((datasets = jsondata.dials && jsondata.dials.dial || jsondata.pointers && jsondata.pointers.pointer || jsondata.value) !== UNDEF) {\n      predictedFormat.gauge = true;\n\n      if (typeof datasets === \"string\") {\n        csv.set(0, 0, doFormat(datasets));\n        predictedFormat.singlevalue = true;\n\n        if (typeof jsondata.target === \"string\") {\n          csv.set(0, 1, doFormat(jsondata.target));\n          predictedFormat.bullet = true;\n        }\n      } else {\n        csv.setRow(0, [\"Id\", \"Value\"]);\n        predictedFormat.multivalue = true;\n\n        for (i = 0, k = 1, j = datasets.length; i < j; i += 1, k += 1) {\n          csv.setRow(k, [k, doFormat(datasets[i].value)]);\n        }\n      }\n    } else if (!isGantt && (datasets = jsondata.dataset || !(jsondata.data instanceof Array) && [])) {\n      predictedFormat.multiseries = true;\n      column = 1;\n      lineset = jsondata.lineset;\n\n      if (lineset) {\n        datasets = datasets.concat(lineset);\n        predictedFormat.lineset = true;\n      }\n\n      axisset = jsondata.axis;\n\n      if (axisset) {\n        datasets = datasets.concat(axisset);\n        predictedFormat.multiaxis = true;\n      }\n\n      if (!datasets.length && jsondata.links) {\n        datasets = datasets.concat({\n          data: jsondata.links\n        });\n      }\n\n      datasetLength = datasets.length;\n      categoryLength = categories.length;\n\n      if (!(datasetLength = datasets.length)) {\n        for (i = 0; i < categoryLength; i += 1) {\n          categoryItem = categories[i];\n          csv.set(i + 1, 0, categoryItem.label || categoryItem.name);\n        }\n\n        predictedFormat.multilevel = true;\n      }\n\n      for (i = 0; i < datasetLength; i += 1) {\n        dataCollection = datasets;\n\n        if (dataCollection[i].dataset) {\n          dataCollection = dataCollection[i].dataset;\n          g = 0;\n          dataCollectionLength = dataCollection.length;\n        } else {\n          dataCollection = datasets;\n          g = i;\n          dataCollectionLength = g + 1;\n        }\n\n        for (; g < dataCollectionLength && !isXYPlot && !isMapPlot && !isDiagramPlot; g += 1) {\n          datasetItem = dataCollection[g];\n          dIndex++;\n\n          if (iApi && (datasetArr = iApi.getDatasets()) && datasetArr[dIndex] && datasetArr[dIndex].visible === false) {\n            continue;\n          }\n\n          dataset = iApi && datasetArr && datasetArr[dIndex];\n          parentYAxis = dataset && dataset.config && dataset.config.parentYAxis;\n          csv.set(0, column, datasetItem.seriesname);\n\n          if (typeof datasetItem.data === \"string\") {\n            predictedFormat.compactdata = true;\n            datasetItem.data = datasetItem.data.split(chartAttrs.dataseparator || \"|\");\n          }\n\n          for (j = 0, k = 0, dataLength = datasetItem.data && datasetItem.data.length || 0; j < dataLength || j < categoryLength; j += 1) {\n            categoryItem = categories[j];\n            row = k + 1;\n            dataItem = datasetItem.data && datasetItem.data[k] || {};\n\n            if (dataItem.x !== UNDEF && dataItem.y !== UNDEF) {\n              isXYPlot = predictedFormat.xy = true;\n              break;\n            }\n\n            if (dataItem.from !== UNDEF && dataItem.to !== UNDEF) {\n              isDiagramPlot = predictedFormat.diagram = true;\n              break;\n            }\n\n            if (dataItem.open !== UNDEF || dataItem.high !== UNDEF || dataItem.close !== UNDEF || dataItem.low !== UNDEF) {\n              isOHLC = predictedFormat.ohlc = true;\n              break;\n            }\n\n            if (dataItem.rowid !== UNDEF && dataItem.columnid !== UNDEF) {\n              isMapPlot = predictedFormat.heatmap = true;\n              break;\n            }\n\n            if (!!defaultDatasetType && defaultDatasetType === \"boxandwhisker2d\") {\n              isBoxWhisker = true;\n              break;\n            }\n\n            if (j < categoryLength && !categoryItem.vline || !categoryItem) {\n              if (!!defaultDatasetType && defaultDatasetType === \"sparkwinloss\") {\n                dataValue = dataItem ? dataItem.value.toUpperCase() : \"\";\n\n                if (dataValue === \"W\") {\n                  winCount++;\n                } else if (dataValue === \"L\") {\n                  lossCount++;\n                } else if (dataValue === \"D\") {\n                  drawsCount++;\n                } else {\n                  errorCount++;\n                }\n              } else {\n                if (categoryItem) {\n                  csv.set(row, 0, categoryItem.label || categoryItem.name);\n                }\n\n                dataValue = toFloat(getCleanValue(dataItem ? dataItem.value : \"\"));\n                dataValue = isNaN(dataValue) ? \"\" : doFormat(dataValue, parentYAxis);\n                csv.set(row, column, dataValue);\n              }\n\n              if (isErrorPlot || forceErrorColumns || dataItem.errorvalue) {\n                if (!isErrorPlot) {\n                  csv.set(0, column + 1, \"Error\");\n                }\n\n                bumpColumnCount = 1;\n                csv.set(row, column + 1, doFormat(dataItem.errorvalue));\n              }\n\n              k += 1;\n            }\n          }\n\n          if (!!defaultDatasetType && defaultDatasetType === \"sparkwinloss\") {\n            csv.clear();\n\n            if (errorCount > 0) {\n              csv.setRow(0, [\"Win\", \"Loss\", \"Draw\", \"Error\"]);\n              csv.setRow(1, [winCount, lossCount, drawsCount, errorCount]);\n            } else {\n              csv.setRow(0, [\"Win\", \"Loss\", \"Draw\"]);\n              csv.setRow(1, [winCount, lossCount, drawsCount]);\n            }\n          }\n\n          if (bumpColumnCount) {\n            column += bumpColumnCount;\n            bumpColumnCount = 0;\n          }\n\n          column += 1;\n        }\n      }\n\n      if (lineset) {\n        datasets = datasets.slice(0, -lineset.length);\n      }\n\n      if (axisset) {\n        datasets = datasets.slice(0, -axisset.length);\n      }\n    } else if (datasets = jsondata.data) {\n      csv.set(0, 1, chartAttrs.yaxisname || \"Value\");\n      predictedFormat.singleseries = true;\n      hasSum = chartAttrs.showsumatend == \"1\";\n\n      for (i = 0, categoryLength = datasets.length; i < categoryLength && !(addParentColumn && addIdColumn); i += 1) {\n        dataItem = datasets[i];\n\n        if (!dataItem.vline) {\n          dataValue = toFloat(getCleanValue(dataItem.value ? dataItem.value : \"\"));\n          rowItems = [dataItem.label || dataItem.name, isNaN(dataValue) ? \"\" : (summation += dataValue, doFormat(dataValue))];\n\n          if (dataItem.id && dataItem.parent) {\n            addParentColumn = true;\n            addIdColumn = true;\n          } else if (dataItem.parent) {\n            addParentColumn = true;\n          } else if (dataItem.id) {\n            addIdColumn = true;\n          } else {\n            csv.setRow(i + 1, rowItems);\n          }\n        }\n      }\n\n      if (addParentColumn && addIdColumn) {\n        return multiLevelCsv({\n          chart: jsondata.chart,\n          category: createMultiLevelMap(jsondata.data).category\n        });\n      } else if (addParentColumn) {\n        csv.setRow(0, [\"Parent Id\", chartAttrs.xaxisname || \"Label\", \"Value\"]);\n      } else if (addIdColumn) {\n        csv.setRow(0, [\"Id\", chartAttrs.xaxisname || \"Label\", \"Value\"]);\n      }\n\n      categoryLength = (addIdColumn || addParentColumn) && datasets.length;\n\n      for (i = 0; i < categoryLength; i++) {\n        dataItem = datasets[i];\n        dataValue = toFloat(getCleanValue(dataItem.value ? dataItem.value : \"\"));\n        rowItems = [dataItem.label || dataItem.name, isNaN(dataValue) ? \"\" : (summation += dataValue, doFormat(dataValue))];\n\n        if (addIdColumn) {\n          csv.setRow(i + 1, [dataItem.id].concat(rowItems));\n        } else if (addParentColumn) {\n          csv.setRow(i + 1, [dataItem.parent].concat(rowItems));\n        }\n      }\n\n      if (hasSum) {\n        predictedFormat.summation = true;\n        csv.setRow(i + 1, [chartAttrs.sumlabel || \"Total\", doFormat(summation)]);\n      }\n    }\n\n    if (isOHLC) {\n      csv.clear();\n      csv.setRow(0, [\"Open\", \"Close\", \"High\", \"Low\", \"Volume\"]);\n\n      for (i = 0, row = 1, datasets = jsondata.dataset, dataCollectionLength = datasets.length; i < dataCollectionLength; i += 1) {\n        for (j = 0, datasetItem = datasets[i] && datasets[i].data || [], datasetLength = datasetItem.length; j < datasetLength; j += 1, row += 1) {\n          dataItem = datasetItem[j] || {};\n          csv.setRow(j + 1, [doFormat(dataItem.open), doFormat(dataItem.close), doFormat(dataItem.high), doFormat(dataItem.low), doFormat(dataItem.volume)]);\n        }\n      }\n    } else if (isXYPlot) {\n      csv.clear();\n      isErrorPlot = false;\n      bumpColumnCount = 0;\n      hasNameColumn = false;\n      firstIndexOfName = 0;\n      csv.setRow(0, [\"Series\", \"x\", \"y\"]);\n\n      for (i = 0, row = 1, datasets = jsondata.dataset, dataCollectionLength = datasets.length; i < dataCollectionLength; i += 1) {\n        if (iApi && (datasetArr = iApi.getDatasets()) && datasetArr[i] && datasetArr[i].visible === false) {\n          continue;\n        }\n\n        for (j = 0, datasetItem = datasets[i] && datasets[i].data || [], datasetLength = datasetItem.length; j < datasetLength; j += 1, row += 1) {\n          dataItem = datasetItem[j] || {};\n\n          if (dataItem.name && !hasNameColumn) {\n            bumpColumnCount ? csv.setRow(0, [\"Series\", \"Name\", \"x\", \"y\", \"z\"]) : csv.setRow(0, [\"Series\", \"Name\", \"x\", \"y\"]);\n            hasNameColumn = true;\n            firstIndexOfName = j;\n          }\n\n          dataValue = hasNameColumn ? [datasets[i].seriesname, doFormat(dataItem.name), doFormat(dataItem.x), doFormat(dataItem.y)] : [datasets[i].seriesname, doFormat(dataItem.x), doFormat(dataItem.y)];\n\n          if (dataItem.z !== UNDEF) {\n            dataValue.push(doFormat(dataItem.z));\n\n            if (!bumpColumnCount) {\n              hasNameColumn ? csv.setRow(0, [\"Series\", \"Name\", \"x\", \"y\", \"z\"]) : csv.setRow(0, [\"Series\", \"x\", \"y\", \"z\"]);\n              bumpColumnCount = 1;\n            }\n          }\n\n          if (isErrorPlot || forceErrorColumns || dataItem.errorvalue !== UNDEF || dataItem.horizontalerrorvalue !== UNDEF || dataItem.verticalerrorvalue !== UNDEF) {\n            errorValue = doFormat(dataItem.errorvalue);\n            dataValue.push(dataItem.errorvalue, dataItem.horizontalerrorvalue === UNDEF ? errorValue : doFormat(dataItem.horizontalerrorvalue), dataItem.verticalerrorvalue === UNDEF ? errorValue : doFormat(dataItem.verticalerrorvalue));\n\n            if (!isErrorPlot) {\n              csv.set(0, bumpColumnCount + 3, \"Error\");\n              csv.set(0, bumpColumnCount + 4, \"Horizontal Error\");\n              csv.set(0, bumpColumnCount + 5, \"Vertical Error\");\n            }\n\n            isErrorPlot = predictedFormat.error = true;\n          }\n\n          csv.setRow(row, dataValue);\n        }\n      }\n\n      if (hasNameColumn) {\n        row = 1;\n\n        for (j = 0; j < firstIndexOfName; j++, row++) {\n          dataItem = datasetItem[j] || {};\n          dataValue = [datasets[i].seriesname, doFormat(dataItem.name), doFormat(dataItem.x), doFormat(dataItem.y)];\n\n          if (dataItem.z !== UNDEF) {\n            dataValue.push(doFormat(dataItem.z));\n          }\n\n          csv.setRow(row, dataValue);\n        }\n      }\n    } else if (isDiagramPlot) {\n      csv.clear();\n      isErrorPlot = false;\n      bumpColumnCount = 0;\n      datasets = jsondata && jsondata.links;\n      csv.setRow(0, [\"from\", \"to\", \"value\"]);\n\n      for (j = 0; j < datasets.length; j += 1, row += 1) {\n        dataItem = datasets[j] || {};\n        dataValue = [dataItem.from, dataItem.to, doFormat(dataItem.value)];\n\n        if (dataItem.z !== UNDEF) {\n          dataValue.push(doFormat(dataItem.z));\n\n          if (!bumpColumnCount) {\n            csv.set(0, 3, \"z\");\n            bumpColumnCount = 1;\n          }\n        }\n\n        if (isErrorPlot || forceErrorColumns || dataItem.errorvalue !== UNDEF || dataItem.horizontalerrorvalue !== UNDEF || dataItem.verticalerrorvalue !== UNDEF) {\n          errorValue = doFormat(dataItem.errorvalue);\n          dataValue.push(dataItem.errorvalue, dataItem.horizontalerrorvalue === UNDEF ? errorValue : doFormat(dataItem.horizontalerrorvalue), dataItem.verticalerrorvalue === UNDEF ? errorValue : doFormat(dataItem.verticalerrorvalue));\n\n          if (!isErrorPlot) {\n            csv.set(0, bumpColumnCount + 3, \"Error\");\n            csv.set(0, bumpColumnCount + 4, \"Horizontal Error\");\n            csv.set(0, bumpColumnCount + 5, \"Vertical Error\");\n          }\n\n          isErrorPlot = predictedFormat.error = true;\n        }\n\n        csv.setRow(row, dataValue);\n      }\n    } else if (isMapPlot) {\n      csv.clear();\n      mapRows = {};\n      mapColumns = {};\n\n      for (i = 0, j = 1, categories = jsondata.rows && jsondata.rows.row || [], l = categories.length; i < l; i += 1, j += 1) {\n        categoryItem = categories[i];\n\n        if (categoryItem.id) {\n          mapRows[categoryItem.id.toLowerCase()] = j;\n          csv.set(j, 0, categoryItem.label || categoryItem.id);\n        }\n      }\n\n      for (i = 0, j = 1, categories = jsondata.columns && jsondata.columns.column || [], l = categories.length; i < l; i += 1, j += 1) {\n        categoryItem = categories[i];\n\n        if (categoryItem.id) {\n          mapColumns[categoryItem.id.toLowerCase()] = j;\n          csv.set(0, j, categoryItem.label || categoryItem.id);\n        }\n      }\n\n      datasetItem = jsondata.dataset && jsondata.dataset[0] && jsondata.dataset[0].data || [];\n      dataStore = iApi && (datasetArr = iApi.getDatasets()) && datasetArr[0] && datasetArr[0].components && datasetArr[0].components.data || [];\n\n      for (i = 0, l = datasetItem.length; i < l; i += 1) {\n        dataItem = datasetItem[i];\n        row = dataItem.rowid.toLowerCase();\n        column = dataItem.columnid.toLowerCase();\n\n        if (dataStore[i] && dataStore[i].visible === false) {\n          continue;\n        }\n\n        if (!mapRows[row]) {\n          var rowCount = csv.rowCount || 1;\n          mapRows[row] = rowCount;\n          csv.set(rowCount, 0, dataItem.rowid);\n        }\n\n        if (!mapColumns[column]) {\n          var columnCount = csv.columnCount || 1;\n          mapColumns[column] = columnCount;\n          csv.set(0, columnCount, dataItem.columnid);\n        }\n\n        csv.set(mapRows[row], mapColumns[column], doFormat(dataItem.value || dataItem.displayvalue));\n      }\n    } else if (isGantt) {\n      var headers = [\"Task name\", \"Start date\", \"End date\", jsondata.processes.headertext || \"Process name\"],\n          taskObj = {},\n          processName,\n          taskName,\n          taskStart,\n          processOfTask,\n          processIndex,\n          taskEnd;\n      dataColumns && dataColumns.forEach(function (dc, dcIndex) {\n        headers.push(dc.headertext && dc.headertext.replace(/{br}/g, \" \") || \"DataColumn \" + dcIndex);\n      });\n      csv.setRow(0, headers);\n      tasks.forEach(function (task, indexRow) {\n        if (task.processid) {\n          processOfTask = processes.filter(function (proc, procIndex) {\n            if (proc.id === task.processid) {\n              processIndex = procIndex;\n            }\n\n            return proc.id === task.processid;\n          })[0];\n          processName = processOfTask.label || processOfTask.name || \"\";\n        } else {\n          processIndex = indexRow;\n          processName = processes[indexRow] && (processes[indexRow].label || processes[indexRow].name) || \"\";\n        }\n\n        taskStart = task.start || \"\";\n        taskEnd = task.end || \"\";\n        taskName = task.label || task.name || \"Task \" + indexRow;\n        taskObj = {\n          taskName: taskName,\n          taskStart: taskStart,\n          taskEnd: taskEnd,\n          processName: processName\n        };\n        dataColumns && dataColumns.forEach(function (dc, dcIndex) {\n          taskObj[\"datacolumn\" + dcIndex] = dc.text[processIndex].label || \"\";\n        });\n        Object.keys(taskObj).forEach(function (key, indexCol) {\n          csv.set(indexRow + 1, indexCol, taskObj[key]);\n        });\n      });\n    } else if (isBoxWhisker && bwCalc) {\n      csv.clear();\n      var columnIndex = 0,\n          fields = [\"Maximum\", \"Median\", \"Minimum\"],\n          min,\n          max,\n          q1,\n          q3,\n          limits,\n          quartile,\n          mean,\n          md,\n          sd,\n          qd,\n          medianValue;\n\n      if (chartAttrs.showq1values) {\n        fields.push(\"Q1\");\n      }\n\n      if (chartAttrs.showq3values) {\n        fields.push(\"Q3\");\n      }\n\n      if (chartAttrs.showmean) {\n        fields.push(\"Mean\");\n      }\n\n      if (chartAttrs.showmd) {\n        fields.push(\"MD\");\n      }\n\n      if (chartAttrs.showsd) {\n        fields.push(\"SD\");\n      }\n\n      if (chartAttrs.showqd) {\n        fields.push(\"QD\");\n      }\n\n      for (i = 0, categories = jsondata.categories && jsondata.categories[0].category || [], l = categories.length; i < l; i += 1) {\n        categoryItem = categories[i];\n\n        for (j = 0; j < datasetLength; j++) {\n          var label = \"\" + categoryItem.label + (datasetLength === 1 ? \"\" : \"(\" + jsondata.dataset[j].seriesname + \")\"),\n              q1Index = fields.indexOf(\"Q1\"),\n              q3Index = fields.indexOf(\"Q3\"),\n              meanIndex = fields.indexOf(\"Mean\"),\n              mdIndex = fields.indexOf(\"MD\"),\n              sdIndex = fields.indexOf(\"SD\"),\n              qdIndex = fields.indexOf(\"QD\"),\n              outliersIndex = fields.indexOf(\"Outliers\"),\n              outliers = jsondata.dataset[j].data[i].outliers,\n              calc = bwCalc[0];\n          columnIndex = columnIndex + 1;\n          csv.set(0, columnIndex, label);\n\n          if (outliersIndex < 0) {\n            fields.push(\"Outliers\");\n          }\n\n          calc.setArray(jsondata.dataset[j].data[i].value);\n          quartile = calc.getQuartiles();\n          q1 = quartile.q1;\n          q3 = quartile.q3;\n          limits = calc.getMinMax();\n          min = limits.min;\n          max = limits.max;\n          medianValue = calc.getMedian();\n          mean = calc.getMean();\n          md = calc.getMD();\n          sd = calc.getSD();\n          qd = calc.getQD();\n          csv.set(1, columnIndex, max);\n          csv.set(2, columnIndex, medianValue);\n          csv.set(3, columnIndex, min);\n\n          if (q1Index > -1) {\n            csv.set(q1Index + 1, columnIndex, q1);\n          }\n\n          if (q3Index > -1) {\n            csv.set(q3Index + 1, columnIndex, q3);\n          }\n\n          if (meanIndex > -1) {\n            csv.set(meanIndex + 1, columnIndex, mean);\n          }\n\n          if (mdIndex > -1) {\n            csv.set(mdIndex + 1, columnIndex, md);\n          }\n\n          if (sdIndex > -1) {\n            csv.set(sdIndex + 1, columnIndex, sd);\n          }\n\n          if (qdIndex > -1) {\n            csv.set(qdIndex + 1, columnIndex, qd);\n          }\n\n          if (outliers) {\n            csv.set(outliersIndex > -1 ? outliersIndex + 1 : fields.length, columnIndex, outliers);\n          }\n        }\n      }\n\n      fields.forEach(function (field, index) {\n        csv.set(index + 1, 0, field);\n      });\n    }\n\n    axisset = null;\n    lineset = null;\n    categories = null;\n    datasets = null;\n\n    if (csv.rowCount > 0 && csv.get(0, 0) === UNDEF) {\n      csv.set(0, 0, chartAttrs.xaxisname || \"Label\");\n    }\n\n    for (i = 1; i < csv.rowCount; i++) {\n      if (csv.data[i][0] !== UNDEF) {\n        isLabelrequired = 1;\n        break;\n      }\n    }\n\n    if (!isLabelrequired && predictedFormat.multiseries) {\n      var dataWithoutLabels = [];\n\n      for (i = 0; i < csv.rowCount; i++) {\n        dataWithoutLabels.push([]);\n\n        for (j = 1; j < csv.data[i].length; j++) {\n          dataWithoutLabels[i][j - 1] = csv.data[i][j];\n        }\n      }\n\n      for (i = 1; i < csv.data[0].length; i++) {\n        if (dataWithoutLabels[0][i - 1] === UNDEF) {\n          dataWithoutLabels[0][i - 1] = VALUE_STR;\n        }\n      }\n\n      csv.data = dataWithoutLabels;\n    }\n  }\n\n  return {\n    data: csv.toString(),\n    error: UNDEF,\n    predictedFormat: predictedFormat\n  };\n};\n\ncsvToJson = function csvToJson(data, fusionCharts) {\n  (0, _eventApi.raiseError)(fusionCharts, \"0604111215\", \"run\", \"csvToJson()\", \"fusionCharts CSV data-handler only supports encoding of data.\");\n  return data;\n};\n\nfunction getCSVData() {\n  return this.getChartData(\"csv\");\n}\n\nfunction getDataAsCSV() {\n  return this.getCSVData();\n}\n\nfunction wrapper(FusionCharts) {\n  if (FusionCharts) {\n    FCGlobal = FusionCharts;\n    FusionCharts.prototype.getDataAsCSV = getDataAsCSV;\n    FusionCharts.prototype.getCSVData = getCSVData;\n  }\n\n  return {\n    format: \"csv\",\n    toJSON: csvToJson,\n    fromJSON: jsonToCsv\n  };\n}\n\nvar _default = {\n  extension: wrapper,\n  name: \"csv\",\n  type: \"transcoder\",\n  requiresFusionCharts: true\n};\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/moham/OneDrive/Desktop/04_06_2021/henaknowledge/frontend v3/henaknowledgefrontend/node_modules/@fusioncharts/features/src/csv-transcoder/index.js"],"names":["_interopRequireDefault","require","exports","__esModule","default","_defineProperty2","_eventApi","_lib","_isArray","_timeConverter","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","win","window","FCGlobal","UNDEF","COMMA","QUOTE","APOS","TAB","CRLF","LIT_QUOT","LIT_TAB","LIT_APOS","VALUE_STR","toInt","parseInt","toFloat","parseFloat","returnFirstArgument","x","jsonToCsv","csvToJson","createMultiLevelMap","multiLevelData","multiLevelValue","counter","_recursiveCategoryCall","multiLevelCsv","multiLevelLineCount","headerLen","DSV","config","data","rowCount","columnCount","configure","_proto","prototype","set","row","col","value","setRow","get","decodeLiterals","delimiter","qualifier","eolCharacter","numberFormatted","clear","toString","str","BLANKSTRING","join","slice","defaultValue","replace","tempMap","categories","item","id","parent","isRootNode","category","oriItem","isValid","isNaN","hasOwnProperty","recursiveCategoryCall","catObj","csv","columnName","label","name","Math","max","pop","jsonData","chartAttrs","chart","categoryLen","header","separator","exportdataseparator","exportdataqualifier","exportdataformattedval","error","predictedFormat","multilevel","fusionCharts","jsondata","jsVars","iApi","instanceAPI","column","g","j","k","l","map","graph","numberFormatter","getFromEnv","getCleanValue","val","_getCleanValue","forceErrorColumns","Boolean","exporterrorcolumns","isGeoPlot","defaultSeriesType","isXYPlot","isErrorPlot","isDiagramPlot","isMapPlot","isBoxWhisker","bwCalc","getChildren","isOHLC","hasSum","doFormat","tasks","Array","isArray","task","processes","process","dataTable","datatable","dataColumns","datacolumn","isGantt","datasets","lineset","axisset","dataCollectionLength","categoryLength","datasetLength","categoryItem","dataCollection","datasetItem","dataLength","dataItem","dataValue","errorValue","bumpColumnCount","summation","datasetArr","mapRows","mapColumns","entities","entityId","entity","options","dataset","dIndex","dataStore","hasNameColumn","firstIndexOfName","parentYAxis","rowItems","addIdColumn","addParentColumn","isTimeseriesChart","args","type","date","isUTC","format","formatter","schema","isLabelrequired","defaultDatasetType","winCount","lossCount","drawsCount","errorCount","formatNumber","axisIndex","getSchema","isUTCEnabled","utcFormatter","getData","geo","getDatasets","components","cleanValue","hidden","shortLabel","formattedValue","dials","dial","pointers","pointer","gauge","singlevalue","bullet","multivalue","multiseries","concat","axis","multiaxis","links","visible","seriesname","compactdata","split","dataseparator","y","xy","from","to","diagram","open","high","close","low","ohlc","rowid","columnid","heatmap","vline","toUpperCase","errorvalue","yaxisname","singleseries","showsumatend","xaxisname","sumlabel","volume","z","horizontalerrorvalue","verticalerrorvalue","rows","toLowerCase","columns","displayvalue","headers","headertext","taskObj","processName","taskName","taskStart","processOfTask","processIndex","taskEnd","dc","dcIndex","indexRow","processid","proc","procIndex","start","end","text","indexCol","columnIndex","fields","min","q1","q3","limits","quartile","mean","md","sd","qd","medianValue","showq1values","showq3values","showmean","showmd","showsd","showqd","q1Index","indexOf","q3Index","meanIndex","mdIndex","sdIndex","qdIndex","outliersIndex","outliers","calc","setArray","getQuartiles","getMinMax","getMedian","getMean","getMD","getSD","getQD","field","index","dataWithoutLabels","raiseError","getCSVData","getChartData","getDataAsCSV","wrapper","FusionCharts","toJSON","fromJSON","_default","extension","requiresFusionCharts"],"mappings":"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","sourcesContent":["\"use strict\";var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");exports.__esModule=true;exports.default=void 0;var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _eventApi=require(\"@fusioncharts/core/src/event-api\");var _lib=require(\"@fusioncharts/core/src/lib\");var _isArray=_interopRequireDefault(require(\"@fusioncharts/utils/src/type/is-array\"));var _timeConverter=_interopRequireDefault(require(\"@fusioncharts/utils/src/time-converter\"));function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}));keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach((function(key){(0,_defineProperty2.default)(target,key,source[key])}))}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source))}else{ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}}return target}var win=window,FCGlobal,UNDEF,COMMA=\",\",QUOTE='\"',APOS=\"'\",TAB=\"\\t\",CRLF=\"\\r\\n\",LIT_QUOT=\"{quot}\",LIT_TAB=\"{tab}\",LIT_APOS=\"{apos}\",VALUE_STR=\"Value\",toInt=win.parseInt,toFloat=win.parseFloat,returnFirstArgument=function returnFirstArgument(x){return x},jsonToCsv,csvToJson,createMultiLevelMap,multiLevelData,multiLevelValue,counter,_recursiveCategoryCall,multiLevelCsv,multiLevelLineCount,headerLen;var DSV=function(){function DSV(config){this.data=[];this.rowCount=0;this.columnCount=0;this.configure(config)}var _proto=DSV.prototype;_proto.set=function set(row,col,value){var i;if(this.rowCount<=row){for(i=this.rowCount;i<=row;i+=1){this.data[i]=[]}this.rowCount=row+1}if(this.columnCount<=col){this.columnCount=col+1}this.data[row][col]=value};_proto.setRow=function setRow(row,value){var i;if(this.rowCount<=row){for(i=this.rowCount;i<=row;i+=1){this.data[i]=[]}this.rowCount=row+1}if(this.columnCount<value.length){this.columnCount=value.length}this.data[row]=value};_proto.get=function get(row,col){var data=this.data;return data[row]&&data[row][col]};_proto.configure=function configure(config){var decodeLiterals=DSV.decodeLiterals;this.delimiter=decodeLiterals(config.delimiter,COMMA);this.qualifier=decodeLiterals(config.qualifier,QUOTE);this.eolCharacter=decodeLiterals(config.eolCharacter,CRLF);this.numberFormatted=!!toInt(config.numberFormatted,0)};_proto.clear=function clear(){this.data=[];this.rowCount=0;this.columnCount=0};_proto.toString=function toString(){var row,col,str=_lib.BLANKSTRING;for(row=0;row<this.rowCount;row+=1){col=this.qualifier+this.data[row].join(this.qualifier+this.delimiter+this.qualifier)+this.qualifier;str+=col==='\"\"'?this.eolCharacter:col+this.eolCharacter}if(this.rowCount>0){str=str.slice(0,str.length-2)}return str};return DSV}();DSV.decodeLiterals=function(str,defaultValue){if(str===UNDEF||str===null||!str.toString){return defaultValue}return str.replace(LIT_TAB,TAB).replace(LIT_QUOT,QUOTE).replace(LIT_APOS,APOS)};createMultiLevelMap=function createMultiLevelMap(data){var tempMap={},categories=[];(0,_isArray.default)(data)&&data.forEach((function(item){tempMap[item.id]=_objectSpread({},item);!tempMap[item.id].parent&&(tempMap[item.id].isRootNode=true);!tempMap[item.id].categories&&(tempMap[item.id].category=[])}));data.forEach((function(oriItem){var item=tempMap[oriItem.id],isValid=false;if(item.id&&(!item.value||!isNaN(+item.value))){if(!item.parent||item.parent&&tempMap[item.parent]){isValid=true}}if(!isValid){delete tempMap[item.id]}}));for(var key in tempMap){if(tempMap.hasOwnProperty(key)){var item=tempMap[key];if(item.parent){tempMap[item.parent].category.push(item)}if(item.isRootNode){categories.push(item)}}}return{category:categories}};_recursiveCategoryCall=function recursiveCategoryCall(catObj,csv,columnName){if(columnName===void 0){columnName=\"category\"}var i;multiLevelData.push(catObj.label||catObj.name||_lib.BLANKSTRING);multiLevelValue.push(isNaN(+catObj.value)?\"\":catObj.value);csv.setRow(multiLevelLineCount++,multiLevelData.slice());counter++;headerLen=Math.max(headerLen,counter);if(catObj[columnName]!==UNDEF){for(i=0;i<catObj[columnName].length;++i){_recursiveCategoryCall(catObj[columnName][i],csv,columnName)}multiLevelData.pop();counter--}else{multiLevelData.pop();counter--}};multiLevelCsv=function multiLevelCsv(data){var jsonData=data,chartAttrs=jsonData.chart,columnName=jsonData.data?\"data\":\"category\",category=jsonData&&jsonData[columnName]||[],categoryLen=category.length,i,header=[],catObj,csv;multiLevelLineCount=1;headerLen=0;counter=0;csv=new DSV({separator:chartAttrs.exportdataseparator,qualifier:chartAttrs.exportdataqualifier,numberFormatted:chartAttrs.exportdataformattedval});multiLevelValue=[];for(i=0;i<categoryLen;++i){catObj=category[i];multiLevelData=[];_recursiveCategoryCall(catObj,csv,columnName)}for(i=0;i<headerLen;++i){header.push(\"Label \"+(i+1))}header.push(\"Value\");csv.setRow(0,header);for(i=multiLevelValue.length-1;i>=0;i--){csv.set(i+1,headerLen,multiLevelValue[i])}return{data:csv.toString(),error:UNDEF,predictedFormat:{multilevel:true}}};jsonToCsv=function jsonToCsv(data,fusionCharts){var jsondata=data,jsVars=fusionCharts&&fusionCharts.jsVars,iApi=jsVars&&jsVars.instanceAPI,csv,row,column,g,i,j,k,l,chartAttrs=jsondata.chart||jsondata.map||jsondata.graph||{},numberFormatter=iApi&&iApi.getFromEnv(\"number-formatter\"),getCleanValue=numberFormatter?function(val){return numberFormatter.getCleanValue(val)}:fusionCharts&&fusionCharts._getCleanValue?function(val){return fusionCharts._getCleanValue(val,chartAttrs)}:returnFirstArgument,forceErrorColumns=Boolean(chartAttrs.exporterrorcolumns||0),categories=jsondata.categories&&jsondata.categories[0]&&jsondata.categories[0].category||[],isGeoPlot=jsondata.map&&!jsondata.chart||jsVars&&jsVars.instanceAPI&&jsVars.instanceAPI.defaultSeriesType===\"geo\",isXYPlot=false,isErrorPlot=false,isDiagramPlot=false,isMapPlot=false,isBoxWhisker=false,bwCalc=iApi.getChildren(\"BoxAndWhiskerStatisticalCalc\"),isOHLC=false,hasSum=false,doFormat=returnFirstArgument,predictedFormat={},tasks=jsondata.tasks?Array.isArray(jsondata.tasks)?jsondata.tasks[0].task:jsondata.tasks.task:UNDEF,processes=jsondata.processes?jsondata.processes.process:UNDEF,dataTable=jsondata.datatable?Array.isArray(jsondata.datatable)?jsondata.datatable[0]:jsondata.datatable:UNDEF,dataColumns=dataTable?dataTable.datacolumn:UNDEF,isGantt=tasks&&processes,datasets,lineset,axisset,dataCollectionLength,categoryLength,datasetLength,categoryItem,dataCollection,datasetItem,dataLength,dataItem,dataValue,errorValue,bumpColumnCount,summation=0,datasetArr,mapRows,mapColumns,entities,entityId,entity,options,dataset,dIndex=-1,dataStore,value,hasNameColumn,firstIndexOfName,parentYAxis,rowItems,addIdColumn,addParentColumn,isTimeseriesChart=fusionCharts.args.type===\"timeseries\",date,isUTC,format,formatter,schema,isLabelrequired,defaultDatasetType=iApi.config.defaultDatasetType,winCount=0,lossCount=0,drawsCount=0,errorCount=0;if(!isTimeseriesChart&&(data.category||data.data&&data.data[0].data)){return multiLevelCsv(data)}csv=new DSV({separator:chartAttrs.exportdataseparator,qualifier:chartAttrs.exportdataqualifier,numberFormatted:chartAttrs.exportdataformattedval});if(FCGlobal.formatNumber&&csv.numberFormatted){doFormat=function doFormat(x,axisIndex){return FCGlobal.formatNumber(x,chartAttrs,axisIndex)}}if(isTimeseriesChart){schema=jsondata.data.getSchema();isUTC=jsondata.data.isUTCEnabled(schema[0].name);format=schema[0].format;formatter=isUTC?_timeConverter.default.utcFormatter(format):_timeConverter.default.formatter(format);datasets=jsondata.data.getData().data;for(i=0;i<schema.length-1;i+=1){csv.set(0,i,schema[i].type===\"date\"?\"Date Time\":schema[i].name)}for(k=0;k<datasets.length;k+=1){dataItem=datasets[k];rowItems=[];for(j=0;j<i;j+=1){if(j===0){date=formatter.format(dataItem[j]);rowItems[j]=date}else{rowItems[j]=(summation+=dataItem[j],doFormat(dataItem[j]))}}csv.setRow(k+1,rowItems)}}else{if(isGeoPlot){predictedFormat.geo=true;datasets=jsVars.instanceAPI.getDatasets();entities=datasets&&datasets[0]&&datasets[0].components.data||[];csv.setRow(0,[\"Id\",\" Short Name\",\"Long Name\",\"Value\",\"Formatted Value\"]);i=0;for(entityId in entities){entity=entities[entityId];options=entity.config;value=options.cleanValue;if(entity.hidden===true){continue}csv.setRow(++i,[entityId,options.shortLabel,options.label,value===null?\"\":value,options.formattedValue])}}else if((datasets=jsondata.dials&&jsondata.dials.dial||jsondata.pointers&&jsondata.pointers.pointer||jsondata.value)!==UNDEF){predictedFormat.gauge=true;if(typeof datasets===\"string\"){csv.set(0,0,doFormat(datasets));predictedFormat.singlevalue=true;if(typeof jsondata.target===\"string\"){csv.set(0,1,doFormat(jsondata.target));predictedFormat.bullet=true}}else{csv.setRow(0,[\"Id\",\"Value\"]);predictedFormat.multivalue=true;for(i=0,k=1,j=datasets.length;i<j;i+=1,k+=1){csv.setRow(k,[k,doFormat(datasets[i].value)])}}}else if(!isGantt&&(datasets=jsondata.dataset||!(jsondata.data instanceof Array)&&[])){predictedFormat.multiseries=true;column=1;lineset=jsondata.lineset;if(lineset){datasets=datasets.concat(lineset);predictedFormat.lineset=true}axisset=jsondata.axis;if(axisset){datasets=datasets.concat(axisset);predictedFormat.multiaxis=true}if(!datasets.length&&jsondata.links){datasets=datasets.concat({data:jsondata.links})}datasetLength=datasets.length;categoryLength=categories.length;if(!(datasetLength=datasets.length)){for(i=0;i<categoryLength;i+=1){categoryItem=categories[i];csv.set(i+1,0,categoryItem.label||categoryItem.name)}predictedFormat.multilevel=true}for(i=0;i<datasetLength;i+=1){dataCollection=datasets;if(dataCollection[i].dataset){dataCollection=dataCollection[i].dataset;g=0;dataCollectionLength=dataCollection.length}else{dataCollection=datasets;g=i;dataCollectionLength=g+1}for(;g<dataCollectionLength&&!isXYPlot&&!isMapPlot&&!isDiagramPlot;g+=1){datasetItem=dataCollection[g];dIndex++;if(iApi&&(datasetArr=iApi.getDatasets())&&datasetArr[dIndex]&&datasetArr[dIndex].visible===false){continue}dataset=iApi&&datasetArr&&datasetArr[dIndex];parentYAxis=dataset&&dataset.config&&dataset.config.parentYAxis;csv.set(0,column,datasetItem.seriesname);if(typeof datasetItem.data===\"string\"){predictedFormat.compactdata=true;datasetItem.data=datasetItem.data.split(chartAttrs.dataseparator||\"|\")}for(j=0,k=0,dataLength=datasetItem.data&&datasetItem.data.length||0;j<dataLength||j<categoryLength;j+=1){categoryItem=categories[j];row=k+1;dataItem=datasetItem.data&&datasetItem.data[k]||{};if(dataItem.x!==UNDEF&&dataItem.y!==UNDEF){isXYPlot=predictedFormat.xy=true;break}if(dataItem.from!==UNDEF&&dataItem.to!==UNDEF){isDiagramPlot=predictedFormat.diagram=true;break}if(dataItem.open!==UNDEF||dataItem.high!==UNDEF||dataItem.close!==UNDEF||dataItem.low!==UNDEF){isOHLC=predictedFormat.ohlc=true;break}if(dataItem.rowid!==UNDEF&&dataItem.columnid!==UNDEF){isMapPlot=predictedFormat.heatmap=true;break}if(!!defaultDatasetType&&defaultDatasetType===\"boxandwhisker2d\"){isBoxWhisker=true;break}if(j<categoryLength&&!categoryItem.vline||!categoryItem){if(!!defaultDatasetType&&defaultDatasetType===\"sparkwinloss\"){dataValue=dataItem?dataItem.value.toUpperCase():\"\";if(dataValue===\"W\"){winCount++}else if(dataValue===\"L\"){lossCount++}else if(dataValue===\"D\"){drawsCount++}else{errorCount++}}else{if(categoryItem){csv.set(row,0,categoryItem.label||categoryItem.name)}dataValue=toFloat(getCleanValue(dataItem?dataItem.value:\"\"));dataValue=isNaN(dataValue)?\"\":doFormat(dataValue,parentYAxis);csv.set(row,column,dataValue)}if(isErrorPlot||forceErrorColumns||dataItem.errorvalue){if(!isErrorPlot){csv.set(0,column+1,\"Error\")}bumpColumnCount=1;csv.set(row,column+1,doFormat(dataItem.errorvalue))}k+=1}}if(!!defaultDatasetType&&defaultDatasetType===\"sparkwinloss\"){csv.clear();if(errorCount>0){csv.setRow(0,[\"Win\",\"Loss\",\"Draw\",\"Error\"]);csv.setRow(1,[winCount,lossCount,drawsCount,errorCount])}else{csv.setRow(0,[\"Win\",\"Loss\",\"Draw\"]);csv.setRow(1,[winCount,lossCount,drawsCount])}}if(bumpColumnCount){column+=bumpColumnCount;bumpColumnCount=0}column+=1}}if(lineset){datasets=datasets.slice(0,-lineset.length)}if(axisset){datasets=datasets.slice(0,-axisset.length)}}else if(datasets=jsondata.data){csv.set(0,1,chartAttrs.yaxisname||\"Value\");predictedFormat.singleseries=true;hasSum=chartAttrs.showsumatend==\"1\";for(i=0,categoryLength=datasets.length;i<categoryLength&&!(addParentColumn&&addIdColumn);i+=1){dataItem=datasets[i];if(!dataItem.vline){dataValue=toFloat(getCleanValue(dataItem.value?dataItem.value:\"\"));rowItems=[dataItem.label||dataItem.name,isNaN(dataValue)?\"\":(summation+=dataValue,doFormat(dataValue))];if(dataItem.id&&dataItem.parent){addParentColumn=true;addIdColumn=true}else if(dataItem.parent){addParentColumn=true}else if(dataItem.id){addIdColumn=true}else{csv.setRow(i+1,rowItems)}}}if(addParentColumn&&addIdColumn){return multiLevelCsv({chart:jsondata.chart,category:createMultiLevelMap(jsondata.data).category})}else if(addParentColumn){csv.setRow(0,[\"Parent Id\",chartAttrs.xaxisname||\"Label\",\"Value\"])}else if(addIdColumn){csv.setRow(0,[\"Id\",chartAttrs.xaxisname||\"Label\",\"Value\"])}categoryLength=(addIdColumn||addParentColumn)&&datasets.length;for(i=0;i<categoryLength;i++){dataItem=datasets[i];dataValue=toFloat(getCleanValue(dataItem.value?dataItem.value:\"\"));rowItems=[dataItem.label||dataItem.name,isNaN(dataValue)?\"\":(summation+=dataValue,doFormat(dataValue))];if(addIdColumn){csv.setRow(i+1,[dataItem.id].concat(rowItems))}else if(addParentColumn){csv.setRow(i+1,[dataItem.parent].concat(rowItems))}}if(hasSum){predictedFormat.summation=true;csv.setRow(i+1,[chartAttrs.sumlabel||\"Total\",doFormat(summation)])}}if(isOHLC){csv.clear();csv.setRow(0,[\"Open\",\"Close\",\"High\",\"Low\",\"Volume\"]);for(i=0,row=1,datasets=jsondata.dataset,dataCollectionLength=datasets.length;i<dataCollectionLength;i+=1){for(j=0,datasetItem=datasets[i]&&datasets[i].data||[],datasetLength=datasetItem.length;j<datasetLength;j+=1,row+=1){dataItem=datasetItem[j]||{};csv.setRow(j+1,[doFormat(dataItem.open),doFormat(dataItem.close),doFormat(dataItem.high),doFormat(dataItem.low),doFormat(dataItem.volume)])}}}else if(isXYPlot){csv.clear();isErrorPlot=false;bumpColumnCount=0;hasNameColumn=false;firstIndexOfName=0;csv.setRow(0,[\"Series\",\"x\",\"y\"]);for(i=0,row=1,datasets=jsondata.dataset,dataCollectionLength=datasets.length;i<dataCollectionLength;i+=1){if(iApi&&(datasetArr=iApi.getDatasets())&&datasetArr[i]&&datasetArr[i].visible===false){continue}for(j=0,datasetItem=datasets[i]&&datasets[i].data||[],datasetLength=datasetItem.length;j<datasetLength;j+=1,row+=1){dataItem=datasetItem[j]||{};if(dataItem.name&&!hasNameColumn){bumpColumnCount?csv.setRow(0,[\"Series\",\"Name\",\"x\",\"y\",\"z\"]):csv.setRow(0,[\"Series\",\"Name\",\"x\",\"y\"]);hasNameColumn=true;firstIndexOfName=j}dataValue=hasNameColumn?[datasets[i].seriesname,doFormat(dataItem.name),doFormat(dataItem.x),doFormat(dataItem.y)]:[datasets[i].seriesname,doFormat(dataItem.x),doFormat(dataItem.y)];if(dataItem.z!==UNDEF){dataValue.push(doFormat(dataItem.z));if(!bumpColumnCount){hasNameColumn?csv.setRow(0,[\"Series\",\"Name\",\"x\",\"y\",\"z\"]):csv.setRow(0,[\"Series\",\"x\",\"y\",\"z\"]);bumpColumnCount=1}}if(isErrorPlot||forceErrorColumns||dataItem.errorvalue!==UNDEF||dataItem.horizontalerrorvalue!==UNDEF||dataItem.verticalerrorvalue!==UNDEF){errorValue=doFormat(dataItem.errorvalue);dataValue.push(dataItem.errorvalue,dataItem.horizontalerrorvalue===UNDEF?errorValue:doFormat(dataItem.horizontalerrorvalue),dataItem.verticalerrorvalue===UNDEF?errorValue:doFormat(dataItem.verticalerrorvalue));if(!isErrorPlot){csv.set(0,bumpColumnCount+3,\"Error\");csv.set(0,bumpColumnCount+4,\"Horizontal Error\");csv.set(0,bumpColumnCount+5,\"Vertical Error\")}isErrorPlot=predictedFormat.error=true}csv.setRow(row,dataValue)}}if(hasNameColumn){row=1;for(j=0;j<firstIndexOfName;j++,row++){dataItem=datasetItem[j]||{};dataValue=[datasets[i].seriesname,doFormat(dataItem.name),doFormat(dataItem.x),doFormat(dataItem.y)];if(dataItem.z!==UNDEF){dataValue.push(doFormat(dataItem.z))}csv.setRow(row,dataValue)}}}else if(isDiagramPlot){csv.clear();isErrorPlot=false;bumpColumnCount=0;datasets=jsondata&&jsondata.links;csv.setRow(0,[\"from\",\"to\",\"value\"]);for(j=0;j<datasets.length;j+=1,row+=1){dataItem=datasets[j]||{};dataValue=[dataItem.from,dataItem.to,doFormat(dataItem.value)];if(dataItem.z!==UNDEF){dataValue.push(doFormat(dataItem.z));if(!bumpColumnCount){csv.set(0,3,\"z\");bumpColumnCount=1}}if(isErrorPlot||forceErrorColumns||dataItem.errorvalue!==UNDEF||dataItem.horizontalerrorvalue!==UNDEF||dataItem.verticalerrorvalue!==UNDEF){errorValue=doFormat(dataItem.errorvalue);dataValue.push(dataItem.errorvalue,dataItem.horizontalerrorvalue===UNDEF?errorValue:doFormat(dataItem.horizontalerrorvalue),dataItem.verticalerrorvalue===UNDEF?errorValue:doFormat(dataItem.verticalerrorvalue));if(!isErrorPlot){csv.set(0,bumpColumnCount+3,\"Error\");csv.set(0,bumpColumnCount+4,\"Horizontal Error\");csv.set(0,bumpColumnCount+5,\"Vertical Error\")}isErrorPlot=predictedFormat.error=true}csv.setRow(row,dataValue)}}else if(isMapPlot){csv.clear();mapRows={};mapColumns={};for(i=0,j=1,categories=jsondata.rows&&jsondata.rows.row||[],l=categories.length;i<l;i+=1,j+=1){categoryItem=categories[i];if(categoryItem.id){mapRows[categoryItem.id.toLowerCase()]=j;csv.set(j,0,categoryItem.label||categoryItem.id)}}for(i=0,j=1,categories=jsondata.columns&&jsondata.columns.column||[],l=categories.length;i<l;i+=1,j+=1){categoryItem=categories[i];if(categoryItem.id){mapColumns[categoryItem.id.toLowerCase()]=j;csv.set(0,j,categoryItem.label||categoryItem.id)}}datasetItem=jsondata.dataset&&jsondata.dataset[0]&&jsondata.dataset[0].data||[];dataStore=iApi&&(datasetArr=iApi.getDatasets())&&datasetArr[0]&&datasetArr[0].components&&datasetArr[0].components.data||[];for(i=0,l=datasetItem.length;i<l;i+=1){dataItem=datasetItem[i];row=dataItem.rowid.toLowerCase();column=dataItem.columnid.toLowerCase();if(dataStore[i]&&dataStore[i].visible===false){continue}if(!mapRows[row]){var rowCount=csv.rowCount||1;mapRows[row]=rowCount;csv.set(rowCount,0,dataItem.rowid)}if(!mapColumns[column]){var columnCount=csv.columnCount||1;mapColumns[column]=columnCount;csv.set(0,columnCount,dataItem.columnid)}csv.set(mapRows[row],mapColumns[column],doFormat(dataItem.value||dataItem.displayvalue))}}else if(isGantt){var headers=[\"Task name\",\"Start date\",\"End date\",jsondata.processes.headertext||\"Process name\"],taskObj={},processName,taskName,taskStart,processOfTask,processIndex,taskEnd;dataColumns&&dataColumns.forEach((function(dc,dcIndex){headers.push(dc.headertext&&dc.headertext.replace(/{br}/g,\" \")||\"DataColumn \"+dcIndex)}));csv.setRow(0,headers);tasks.forEach((function(task,indexRow){if(task.processid){processOfTask=processes.filter((function(proc,procIndex){if(proc.id===task.processid){processIndex=procIndex}return proc.id===task.processid}))[0];processName=processOfTask.label||processOfTask.name||\"\"}else{processIndex=indexRow;processName=processes[indexRow]&&(processes[indexRow].label||processes[indexRow].name)||\"\"}taskStart=task.start||\"\";taskEnd=task.end||\"\";taskName=task.label||task.name||\"Task \"+indexRow;taskObj={taskName:taskName,taskStart:taskStart,taskEnd:taskEnd,processName:processName};dataColumns&&dataColumns.forEach((function(dc,dcIndex){taskObj[\"datacolumn\"+dcIndex]=dc.text[processIndex].label||\"\"}));Object.keys(taskObj).forEach((function(key,indexCol){csv.set(indexRow+1,indexCol,taskObj[key])}))}))}else if(isBoxWhisker&&bwCalc){csv.clear();var columnIndex=0,fields=[\"Maximum\",\"Median\",\"Minimum\"],min,max,q1,q3,limits,quartile,mean,md,sd,qd,medianValue;if(chartAttrs.showq1values){fields.push(\"Q1\")}if(chartAttrs.showq3values){fields.push(\"Q3\")}if(chartAttrs.showmean){fields.push(\"Mean\")}if(chartAttrs.showmd){fields.push(\"MD\")}if(chartAttrs.showsd){fields.push(\"SD\")}if(chartAttrs.showqd){fields.push(\"QD\")}for(i=0,categories=jsondata.categories&&jsondata.categories[0].category||[],l=categories.length;i<l;i+=1){categoryItem=categories[i];for(j=0;j<datasetLength;j++){var label=\"\"+categoryItem.label+(datasetLength===1?\"\":\"(\"+jsondata.dataset[j].seriesname+\")\"),q1Index=fields.indexOf(\"Q1\"),q3Index=fields.indexOf(\"Q3\"),meanIndex=fields.indexOf(\"Mean\"),mdIndex=fields.indexOf(\"MD\"),sdIndex=fields.indexOf(\"SD\"),qdIndex=fields.indexOf(\"QD\"),outliersIndex=fields.indexOf(\"Outliers\"),outliers=jsondata.dataset[j].data[i].outliers,calc=bwCalc[0];columnIndex=columnIndex+1;csv.set(0,columnIndex,label);if(outliersIndex<0){fields.push(\"Outliers\")}calc.setArray(jsondata.dataset[j].data[i].value);quartile=calc.getQuartiles();q1=quartile.q1;q3=quartile.q3;limits=calc.getMinMax();min=limits.min;max=limits.max;medianValue=calc.getMedian();mean=calc.getMean();md=calc.getMD();sd=calc.getSD();qd=calc.getQD();csv.set(1,columnIndex,max);csv.set(2,columnIndex,medianValue);csv.set(3,columnIndex,min);if(q1Index>-1){csv.set(q1Index+1,columnIndex,q1)}if(q3Index>-1){csv.set(q3Index+1,columnIndex,q3)}if(meanIndex>-1){csv.set(meanIndex+1,columnIndex,mean)}if(mdIndex>-1){csv.set(mdIndex+1,columnIndex,md)}if(sdIndex>-1){csv.set(sdIndex+1,columnIndex,sd)}if(qdIndex>-1){csv.set(qdIndex+1,columnIndex,qd)}if(outliers){csv.set(outliersIndex>-1?outliersIndex+1:fields.length,columnIndex,outliers)}}}fields.forEach((function(field,index){csv.set(index+1,0,field)}))}axisset=null;lineset=null;categories=null;datasets=null;if(csv.rowCount>0&&csv.get(0,0)===UNDEF){csv.set(0,0,chartAttrs.xaxisname||\"Label\")}for(i=1;i<csv.rowCount;i++){if(csv.data[i][0]!==UNDEF){isLabelrequired=1;break}}if(!isLabelrequired&&predictedFormat.multiseries){var dataWithoutLabels=[];for(i=0;i<csv.rowCount;i++){dataWithoutLabels.push([]);for(j=1;j<csv.data[i].length;j++){dataWithoutLabels[i][j-1]=csv.data[i][j]}}for(i=1;i<csv.data[0].length;i++){if(dataWithoutLabels[0][i-1]===UNDEF){dataWithoutLabels[0][i-1]=VALUE_STR}}csv.data=dataWithoutLabels}}return{data:csv.toString(),error:UNDEF,predictedFormat:predictedFormat}};csvToJson=function csvToJson(data,fusionCharts){(0,_eventApi.raiseError)(fusionCharts,\"0604111215\",\"run\",\"csvToJson()\",\"fusionCharts CSV data-handler only supports encoding of data.\");return data};function getCSVData(){return this.getChartData(\"csv\")}function getDataAsCSV(){return this.getCSVData()}function wrapper(FusionCharts){if(FusionCharts){FCGlobal=FusionCharts;FusionCharts.prototype.getDataAsCSV=getDataAsCSV;FusionCharts.prototype.getCSVData=getCSVData}return{format:\"csv\",toJSON:csvToJson,fromJSON:jsonToCsv}}var _default={extension:wrapper,name:\"csv\",type:\"transcoder\",requiresFusionCharts:true};exports.default=_default;"]},"metadata":{},"sourceType":"script"}