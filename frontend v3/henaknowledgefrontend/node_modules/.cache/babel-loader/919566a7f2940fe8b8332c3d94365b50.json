{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport jwt_decode from \"jwt-decode\";\nlet loginState = false;\n\nif (localStorage.getItem(\"jwt\") !== null && localStorage.getItem(\"jwt\") !== null) {\n  loginState = true;\n}\n\nlet ObtainedUserType;\n\nif (localStorage.getItem(\"userType\") !== null) {\n  ObtainedUserType = localStorage.getItem(\"userType\");\n}\n\nconst initAuth = {\n  isLoggedin: loginState,\n  userType: ObtainedUserType,\n  expirationDate: 0,\n  remainingDuration: 0\n};\n\nconst calculateRemainingTime = expirationTime => {\n  const currentTime = new Date().getTime();\n  const adjExpirationTime = new Date(expirationTime).getTime();\n  const theremainingDuration = adjExpirationTime - currentTime;\n  return theremainingDuration;\n};\n\nconst AuthSlice = createSlice({\n  name: \"Authentication\",\n  initialState: initAuth,\n  reducers: {\n    logout(state) {\n      state.isLoggedin = false;\n      state.userType = \"\";\n      state.expirationDate = \"\";\n      localStorage.clear();\n    },\n\n    login(state, action) {\n      state.isLoggedin = true;\n      state.userType = action.payload.userType;\n      state.expirationDate = action.payload.expirationDate;\n      state.remainingDuration = calculateRemainingTime(state.expirationDate); //get the token\n\n      localStorage.setItem(\"jwt\", action.payload.jwt); //decode the generated token to extract data\n\n      var token = localStorage.getItem(\"jwt\");\n      var decoded = jwt_decode(token);\n      /* example\r\n        decoded {\r\n          exp: 1622236209\r\n         iat: 1621372209\r\n         role: \"Student\"\r\n          sub: \"bb\"\r\n        }\r\n      */\n      //set local information from the generated token.\n\n      localStorage.setItem(\"username\", decoded.sub);\n      localStorage.setItem(\"userType\", decoded.role);\n      localStorage.setItem(\"expirationDate\", decoded.exp);\n    }\n\n  }\n});\nexport const AuthActions = AuthSlice.actions;\nexport default AuthSlice.reducer;","map":{"version":3,"sources":["C:/Users/moham/OneDrive/Desktop/16_05_2021/henaknowledge/frontend v3/henaknowledgefrontend/src/Store/AuthSlice.js"],"names":["createSlice","jwt_decode","loginState","localStorage","getItem","ObtainedUserType","initAuth","isLoggedin","userType","expirationDate","remainingDuration","calculateRemainingTime","expirationTime","currentTime","Date","getTime","adjExpirationTime","theremainingDuration","AuthSlice","name","initialState","reducers","logout","state","clear","login","action","payload","setItem","jwt","token","decoded","sub","role","exp","AuthActions","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,IAAIC,UAAU,GAAG,KAAjB;;AAEA,IACEC,YAAY,CAACC,OAAb,CAAqB,KAArB,MAAgC,IAAhC,IACAD,YAAY,CAACC,OAAb,CAAqB,KAArB,MAAgC,IAFlC,EAGE;AACAF,EAAAA,UAAU,GAAG,IAAb;AACD;;AACD,IAAIG,gBAAJ;;AACA,IAAIF,YAAY,CAACC,OAAb,CAAqB,UAArB,MAAqC,IAAzC,EAA+C;AAC7CC,EAAAA,gBAAgB,GAAGF,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAnB;AACD;;AACD,MAAME,QAAQ,GAAG;AACfC,EAAAA,UAAU,EAAEL,UADG;AAEfM,EAAAA,QAAQ,EAAEH,gBAFK;AAGfI,EAAAA,cAAc,EAAE,CAHD;AAIfC,EAAAA,iBAAiB,EAAE;AAJJ,CAAjB;;AAOA,MAAMC,sBAAsB,GAAIC,cAAD,IAAoB;AACjD,QAAMC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAApB;AACA,QAAMC,iBAAiB,GAAG,IAAIF,IAAJ,CAASF,cAAT,EAAyBG,OAAzB,EAA1B;AAEA,QAAME,oBAAoB,GAAGD,iBAAiB,GAAGH,WAAjD;AAEA,SAAOI,oBAAP;AACD,CAPD;;AASA,MAAMC,SAAS,GAAGlB,WAAW,CAAC;AAC5BmB,EAAAA,IAAI,EAAE,gBADsB;AAE5BC,EAAAA,YAAY,EAAEd,QAFc;AAG5Be,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,CAACC,KAAD,EAAQ;AACZA,MAAAA,KAAK,CAAChB,UAAN,GAAmB,KAAnB;AACAgB,MAAAA,KAAK,CAACf,QAAN,GAAiB,EAAjB;AACAe,MAAAA,KAAK,CAACd,cAAN,GAAuB,EAAvB;AACAN,MAAAA,YAAY,CAACqB,KAAb;AACD,KANO;;AAQRC,IAAAA,KAAK,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACnBH,MAAAA,KAAK,CAAChB,UAAN,GAAmB,IAAnB;AACAgB,MAAAA,KAAK,CAACf,QAAN,GAAiBkB,MAAM,CAACC,OAAP,CAAenB,QAAhC;AACAe,MAAAA,KAAK,CAACd,cAAN,GAAuBiB,MAAM,CAACC,OAAP,CAAelB,cAAtC;AACAc,MAAAA,KAAK,CAACb,iBAAN,GAA0BC,sBAAsB,CAACY,KAAK,CAACd,cAAP,CAAhD,CAJmB,CAMnB;;AACAN,MAAAA,YAAY,CAACyB,OAAb,CAAqB,KAArB,EAA4BF,MAAM,CAACC,OAAP,CAAeE,GAA3C,EAPmB,CASnB;;AACA,UAAIC,KAAK,GAAG3B,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAZ;AACA,UAAI2B,OAAO,GAAG9B,UAAU,CAAC6B,KAAD,CAAxB;AAEA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AAEQ;;AACF3B,MAAAA,YAAY,CAACyB,OAAb,CAAqB,UAArB,EAAiCG,OAAO,CAACC,GAAzC;AACA7B,MAAAA,YAAY,CAACyB,OAAb,CAAqB,UAArB,EAAiCG,OAAO,CAACE,IAAzC;AACA9B,MAAAA,YAAY,CAACyB,OAAb,CAAqB,gBAArB,EAAuCG,OAAO,CAACG,GAA/C;AACD;;AAlCO;AAHkB,CAAD,CAA7B;AAyCA,OAAO,MAAMC,WAAW,GAAGjB,SAAS,CAACkB,OAA9B;AACP,eAAelB,SAAS,CAACmB,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nlet loginState = false;\r\n\r\nif (\r\n  localStorage.getItem(\"jwt\") !== null &&\r\n  localStorage.getItem(\"jwt\") !== null\r\n) {\r\n  loginState = true;\r\n}\r\nlet ObtainedUserType;\r\nif (localStorage.getItem(\"userType\") !== null) {\r\n  ObtainedUserType = localStorage.getItem(\"userType\");\r\n}\r\nconst initAuth = {\r\n  isLoggedin: loginState,\r\n  userType: ObtainedUserType,\r\n  expirationDate: 0,\r\n  remainingDuration: 0,\r\n};\r\n\r\nconst calculateRemainingTime = (expirationTime) => {\r\n  const currentTime = new Date().getTime();\r\n  const adjExpirationTime = new Date(expirationTime).getTime();\r\n\r\n  const theremainingDuration = adjExpirationTime - currentTime;\r\n\r\n  return theremainingDuration;\r\n};\r\n\r\nconst AuthSlice = createSlice({\r\n  name: \"Authentication\",\r\n  initialState: initAuth,\r\n  reducers: {\r\n    logout(state) {\r\n      state.isLoggedin = false;\r\n      state.userType = \"\";\r\n      state.expirationDate = \"\";\r\n      localStorage.clear();\r\n    },\r\n\r\n    login(state, action) {\r\n      state.isLoggedin = true;\r\n      state.userType = action.payload.userType;\r\n      state.expirationDate = action.payload.expirationDate;\r\n      state.remainingDuration = calculateRemainingTime(state.expirationDate);\r\n\r\n      //get the token\r\n      localStorage.setItem(\"jwt\", action.payload.jwt);\r\n\r\n      //decode the generated token to extract data\r\n      var token = localStorage.getItem(\"jwt\");\r\n      var decoded = jwt_decode(token);\r\n\r\n      /* example\r\n        decoded {\r\n          exp: 1622236209\r\n         iat: 1621372209\r\n         role: \"Student\"\r\n          sub: \"bb\"\r\n        }\r\n      */\r\n\r\n        //set local information from the generated token.\r\n      localStorage.setItem(\"username\", decoded.sub);\r\n      localStorage.setItem(\"userType\", decoded.role);\r\n      localStorage.setItem(\"expirationDate\", decoded.exp);\r\n    },\r\n  },\r\n});\r\n\r\nexport const AuthActions = AuthSlice.actions;\r\nexport default AuthSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}